//=====================================================================================================================================================================

function abc() {
var a = "bbb";
console.log(a)     					 // 1번 bbb
function c() {
console.log(a);    				 // 2번
(function() {
console.log(a);    			 // 3번
a = "ccc";
})();
var a;
console.log(a) 	  		  	 // 4번
}
function d() {
console.log(a);    			 	// 5번
}
c();
a = "ddd";
d();
};
abc();


//=====================================================================================================================================================================
// // 자바스크립트의 함수선언 방법 4가지

// // 1. 함수선언 방식 [function name방식]  호이스팅이 됨!
// function f1(){
//     console.log('1');
// }
// f1();        //출력값 1


// // 2. 함수표현 방식       변수에 저장하기 때문에 함수에는 이름을 사용하지 않는다
// // 호이스팅이 되지 않는다!
// let f2 = function(){
//     console.log('2');
// }
// f2();       //출력값 2


// // 3. 람다식
// let f3 = () => {
//     console.log('3')
// }
// f3();        //출력값 3


// // 4. 즉시실행함수[IIFE] 익명함수 + 바로 호출해서 사용
// // step 1
// let f4 = function(){
//     console.log('4');
// }
// f4();

// // step 2   익명함수를 선언만하고 호출을 하지 않았기 때문에 console.log('4') 는 실행되지 않는다
// function(){
//     console.log('4');
// }

// // step 3   이때부터는 사용이 가능한 함수이다
// (function(){
//     console.log('4');
// })();

// // step 4   step3번의 내용을 람다식으로 표현했다
// (()=>{
//     console.log('4');
// })();


// // 함수에서 매개변수 넘겨주기
// // 함수의 매개변수에는 자료형은 쓰지 않는다
// function f4(num){
//     console.log(num)
// }
// f4(100);

// // 위의 코드를 즉시실행 함수로 바꿔본다
// (function(num){
//     console.log(num,);
// })(200);




// let start = new Date().getTime();
// while(new Date().getTime() < start+2000);
// console.log('test');
// // 위의 코드와 아래의 코드는 완전 동일한 코드이다!
// // 아래 코드중 함수호출 부분에 2000의 내용은 인수로써 매개변수 dt의 값이 되어 내부에 적용이 되기 때문이다
// (function(dt){
//     let start = new Date().getTime();
//     while(new Date().getTime() < start+dt);
// })(2000);
// console.log('test');



// // 5. 생성자 함수 [자바의 클래스와 동일한 개념]
// // 함수의 첫번째 글자가 대문자로 작성되면
// // 생성자 함수가 된다 [자바의 클래스 개념과 동격이됨]
// // 함수를 호출할때 함수명의 첫째 글자가 대문자냐 소문자냐에 따라 함수인지 생성자함수인지 알 수 있다
// // 클래스(생성자함수)의 멤버변수 작성 방법 [this]
// // 클래스(생성자함수)에서 멤버를 만들어 줄때 멤버변수 간에 ,(콤마)를 사용해서 구분하지않고 한라인에 멤버변수 1개를 만든다
// function Fff555(){
//     this.num1 = 10  //내부에서 멤버변수를 만들어줄떄 ,(콤마) 사용 절대 안함!!
//     this.num2 = 20
//     this.m1= function(){
//         console.log(this.num1);
//     }
//     // 아래의 코드는 위의 m1 코드를 람다식으로 표현해봤음
//     this.m2= () => {
//         console.log(this.num2);
//     }
// }
// // new를 사용해서 객체를 만들어냄!
// let ins = new Fff555();
// ins.m1()    //출력값 10
// ins.m2()    //출력값 20

// //위에서 객체를 만들어서 .(도트) 찍어서 사용하는 것과 아래의 코드는 동일함!
// new Fff555().m1()   //출력값 10
// new Fff555().m2()   //출력값 20


function t1(){
    console.log('1');
}
function t2(n,s){
    console.log(n+s);
}
// 함수의 원형만 보고는 return이 있는지 없는지 알지못해서
// 코드의 가독성이 현저히 떨어진다는 단점 또한 있다
function t3(){
    console.log('3');
    return 888
}
function t4(n){
    console.log('4');
    return n*2
}

t1()
t2(20, '호랑이')    //숫자 2개를 쓰던, 숫자와 문자열을 쓰던 인수 두개를 합친것을 return해줌
t3()    //인수전달이 없고 return이 항상 888임!
t4(33)  //인수전달 받은 내용에 2를 곱해줬다

// arguments 내장객체 사용하기(가변인수)
// [가변인수 전달] 함수의 매개변수로 몇개가 올지 모를때 사용할수있게함!!
function t5(){
    console.log(arguments[0]);  //출력값 10
    console.log(arguments[1]);  //출력값 20
    console.log(arguments[2]);  //출력값 30
}
t5(10, 20, 30)

function t6(){
    let sum = 0;
    for (let key in arguments) {
        sum += arguments[key]
    }
    console.log(sum);   //출력값 60
}

t6(10, 20, 30)

//=====================================================================================================================================================================
//  // while(new Date().getTime()<start+2000);

// // == 값이 똑같냐? [타입 상관 x]
// console.log(100 == 100);    //true
// console.log(100 == '100');  //true

// // === 값도 같고 타입또한 같냐?
// console.log(100 === 100); //true
// console.log(100 === '100'); //false


// // 자바스크립트에서 사용하는 코드 테크닉
// let a = 10
// if(a > 3){
// console.log('test');
// }

// //위와 아래의 코드는 둘다 출력이되고 완전히 똑같은 코드이다!
// a > 3 && console.log('test');



//=====================================================================================================================================================================


// let start = new Date().getTime();
// console.log(start);

// // start에서 보여지는 1000은 1초이다!
// // 아래의 for문은 1초동안 돈다!! 
// for (var i = 0; new Date().getTime() < start + 1000 ; i++) {
// }

// //i의 값은 1초동안 for문이 반복된 횟수를 의미한다
// console.log(i);

// // 시간지연[프로그램을 잠시 멈추는 방법]
// while(new Date().getTime()<start+2000);
// console.log('호랑이');





//=====================================================================================================================================================================
// // Date() 대한민국 현재 날짜 시간 요일 등을 알수있다
// let a = new Date()
// console.log(a.getFullYear(), '년');
// //0월+1
// console.log(a.getMonth()+1, '월');
// console.log(a.getDate(), '일');
// // 0(일) 1(월) 2(화)
// console.log(a.getDay(), '요일');
// console.log(a.getHours(), '시');
// console.log(a.getMinutes(), '분');
// console.log(a.getSeconds(), '초');
// console.log(typeof a);

//=====================================================================================================================================================================
// 산술연산, 비교연산, 논리연산, 증가연산, 감소연산,
// += 복합대입연산, 제어문, 삼항연산, true, false 전부다 java랑 동일함

// 제곱근 쉽게 구하기
// console.log(2 ** 8);  // 2의8승




//=====================================================================================================================================================================
// // String, Number 자료형 변환시키기!
// let str = "호랑이"
// str += '독수리'
// console.log(str);       //출력값 :호랑이독수리


// let s = '1000'
// let n = 1000
// console.log(typeof(s), typeof(n));      //출력값 :number number

// console.log(typeof(Number(s)),typeof(String(n)));       //출력값 :number string



//=====================================================================================================================================================================

// //여기서 a는 숫자형 데이터 이지만
// let a= 10
// console.log(typeof(a));     //출력값 number

// // 이순간 숫자형 데이터에서 string데이터로 변하게 된다
// a= '호랑이'
// console.log(typeof(a));     //출력값 string





//=====================================================================================================================================================================

// // 객체타입 [JSON타입과 99% 똑같다!]
// let tiger = {
//     a: 10,
//     b: '호랑이',
//     c: true,
//     d: [],
//     e: {},
//     f: function(){},
//     g: undefined
// }

// console.log(tiger.a);       //출력값 10
// console.log(tiger.b);       //출력값 호랑이




//=====================================================================================================================================================================
// // 2. 데이터 타입

// // 숫자 타입
// let a = 10
// // 문자열 타입
// let b = '호랑이';
// // boolean타입
// let c = true
// // 배열 타입(오브젝트)
// let d = []
// // 오브젝트 타입    // JS에서 가장 중요하게 사용하는 타입
// let e = {}  
// // 함수 (function) 타입
// let f = function(){}
// // undefined 타입
// let g = undefined

// console.log(1,`${typeof(a)}`);
// console.log(2,`${typeof(b)}`);
// console.log(3,`${typeof(c)}`);
// console.log(4,`${typeof(d)}`);
// console.log(5,`${typeof(e)}`);
// console.log(6,`${typeof(f)}`);
// console.log(7,`${typeof(g)}`);



//=====================================================================================================================================================================

// // 1. 출력code와 변수 선언
// // JS의 자료형은 단3가지만 있다!
// console.log('hello world!');
// var a= 10
// let b= 30
// const c= 20
// // JAVA와 다르게 연속해서 변수들을 출력할 수 있다.
// console.log(a, b, c);

