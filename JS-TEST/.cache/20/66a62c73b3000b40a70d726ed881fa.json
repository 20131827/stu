{"id":"main.js","dependencies":[{"name":"C:\\gitSavePoint\\stu\\JS-TEST\\package.json","includedInParent":true,"mtime":1631347375530}],"generated":{"js":"//-------------------------------------------------------------------\n//  // Object.assign()\n// const target = { a: 1, b: 2 };\n// const source = { b: 4, c: 5 };\n// // target 객체에 source를 병합한다는 의미 <중복되는 데이터를 덮어씀>\n// const returnedTarget = Object.assign(target, source);\n// console.log(target);                // 출력값:  Object { a: 1, b: 4, c: 5 }\n// console.log(returnedTarget);        // 출력값:  Object { a: 1, b: 4, c: 5 }\n// Object.assign()\nvar userAge = {\n  // key : value\n  name: 'jinwoong',\n  age: 35\n};\nvar userEmail = {\n  name: 'jinwoong',\n  email: 'qwaszx3677@naer.com'\n};\nvar target = Object.assign(userAge, userEmail);\nconsole.log(target);\nconsole.log(userAge);\nconsole.log(target === userAge);\nvar a = {\n  k: 123\n};\nvar b = {\n  k: 123\n};\nconsole.log(a === b); //-------------------------------------------------------------------\n// .filter()\n// const numbers = [1, 2, 3, 4]\n// const fruits = ['Apple', 'Banana', 'orange']\n// // 총 4번의 리턴을 한다!! numbers의 요소가 4개이기 때문\n// // 원본 데이터에 변화를 주지않음!\n// const a = numbers.map(item => {\n//     return item < 3\n// })\n// //const a = numbers.map(item =>  item < 3) //람다식으로 고친 코드!\n// console.log(a);     //출력값 [true, true, false, false]\n// // filter메소드는 조건이 true인 경우에만 데이터를 반환해준다(필터링)\n// // 원본 데이터에 변화를 주지않음!\n// const b = numbers.filter(item => {\n//     return item < 3\n// })\n// //const b = numbers.filter(item => item < 3)  //람다식으로 고친 코드!\n// console.log(b);     //출력값 [1, 2]\n// // .find()  || .finfIndex()\n// const numbers = [1, 2, 3, 4]\n// const fruits = ['Apple', 'Banana', 'orange']\n// // find() 함수는 배열(fruits)의 요소 갯수 만큼 반복됨\n// // find() 함수의 조건으로 true가 반환되면 반복을 멈추고\n// // true를 만족시키는 데이터를 함수의 반환값으로 넘겨준다\n// const a = fruits.find(itme => {\n//     return/^B/.test(itme)       //(조건) B로 시작하는가?\n// })\n// //const a = fruits.find(itme => /^B/.test(itme))        //위의 코드를 람다식으로 고침!\n// console.log(a);     //출력값 : Banana\n// // 함수의 조건으로 true가 반환되면 반복을 멈추고\n// // true를 만족시키는 데이터의 인덱스 번호(제로베이스드)를 반환값으로 넘겨준다!\n// const b = fruits.findIndex(itme => {\n//     return/^B/.test(itme)       //(조건) B로 시작하는가?\n// })\n// //const b = fruits.findIndex(itme => /^B/.test(itme))     //위의 코드를 람다식으로 고침\n// console.log(b);     //출력값 : 1\n// // .includes()\n// const numbers = [1, 2, 3, 4]\n// const fruits = ['Apple', 'Banana', 'orange']\n// // numbers 배열에 3 이라는 데이터가 포함되어있냐? true flase로 반환해줘\n// const a = numbers.includes(3)\n// console.log(a);\n// // fruits0 배열에 Jin 이라는 데이터가 포함되어있냐? true flase로 반환해줘\n// const b = fruits.includes('Jin')\n// console.log(b);\n// // .push()    ||    .unshift()\n// // 원본 데이터가 수정된다 주의!!\n// // push는 배열의 가장뒷쪽에 데이터 삽입 || unshift는 배열의 가장앞쪽에 데이터 삽입\n// const numbers = [1, 2, 3, 4]\n// const fruits = ['Apple', 'Banana', 'orange']\n// // numbers배열 가장 뒷쪽 부분에 5라는 데이터를 삽입한다\n// numbers.push(5)\n// console.log(numbers);\n// // numbers배열 가장 앞쪽 부분에 0이라는 데이터를 삽입한다\n// numbers.unshift(0)\n// console.log(numbers);\n// // .reverse()\n// // 원본 데이터가 수정된다 주의!!\n// const numbers = [1, 2, 3, 4]\n// const fruits = ['Apple', 'Banana', 'orange']\n// // numbers배열의 순서를 뒤집어서 저장한다\n// numbers.reverse()\n// // fruits배열의 순서를 뒤집어서 저장한다\n// fruits.reverse()\n// console.log(numbers);   //출력값 : [4, 3, 2, 1]\n// console.log(fruits);    //출력값 : ['orange', 'Banana', 'Apple']\n// // .splice()\n// // 원본 데이터가 수정된다 주의!!\n// const numbers = [1, 2, 3, 4]\n// const fruits = ['Apple', 'Banana', 'orange']\n// // splice(삭제를 시작할 인덱스 번호, 시작번호부터 몇개를 삭제할지)\n// numbers.splice(2, 1)    // 2번인덱스 부터 1개의 요소를 지워라는 뜻\n// console.log(numbers);   // 출력값 : [1, 2, 4]\n// // splice(삭제를 시작할 인덱스 번호, 시작번호부터 몇개를 삭제할지, 삭제를 시작할 인덱스 번호에 넣고싶은 데이터를 입력)\n// numbers.splice(2, 0, 999)    // 2번인덱스 부터 개의 요소를 지우고 999를 삽입해라\n// console.log(numbers);   // 출력값 : [1, 2, 999, 3, 4]\n//-------------------------------------------------------------------\n// const numbers = [1, 2, 3, 4]\n// const fruits = ['Apple', 'Banana']\n// console.log(numbers);   //[1, 2, 3, 4] 출력\n// console.log(fruits);    //['Apple', 'Banana'] 출력\n// console.log(fruits[0]); //Apple 출력\n// .find\n// const array1 = [5, 12, 8, 130, 44];\n// const found = array1.find(element => element > 10);\n//array1 배열의 1번째 요소부터 검사를 해서 해당 조건의 결과값으로 true가 나오면 그 요소를 반환함\n// console.log(found); //출력값 12\n// .length  렝스는 배열속에 요소가 몇개 있는지 반환해주는 매소드이다\n// const numbers = [1, 2, 3, 4]\n// const fruits = ['Apple', 'Banana']\n// console.log(numbers.length);    //출력값 4\n// console.log(fruits.length);     //출력값 4\n// console.log([1,2].length);      //출력값 2\n// console.log([].length);         //출력값 0\n// // .concat()  콘켓을 사용하면 기존배열에다가 다른 배열의 데이터를 삽입할 수 있다\n// const numbers = [1, 2, 3, 4]\n// const fruits = ['Apple', 'Banana']\n// // 콘켓을 사용하면 원본 데이터값에 변화를 주지 않고 사용이 가능!\n// console.log(numbers.concat(fruits));    //출력값 [1, 2, 3, 4, 'Apple', 'Banana']\n// console.log(numbers);     //출력값 [1, 2, 3, 4]\n// console.log(fruits);      //출력값 ['Apple', 'Banana']\n// // .forEach() 사용하려는 배열의 요소갯수만큼 반복된다!\n// // fruits배열에 forEach()를 사용하면 3번 반복문이 동작한다\n// const numbers = [1, 2, 3, 4]\n// const fruits = ['Apple', 'Banana', 'orange']\n// // 매소드의 인수로 사용되는 함수를 콜백함수라고 한다 아래의 경우 이름이 없으니까 \n// // 익명함수이면서 콜백함수이다\n// // forEach가 실행될때 element부분에는 데이터값이 넘어오고 \n// // index에는 제로베이스드의 인덱스 값이 넘어오고\n// // array부분에는 forEach()를 사용하고있는 배열데이터를 지칭함 아래의 경우 fruits를 의미\n// fruits.forEach(function (element, index, array) {\n//     console.log(element, index, array)\n// }) // 출력값\n// // Apple 0 (3) ['Apple', 'Banana', 'orange']\n// // Banana 1 (3) ['Apple', 'Banana', 'orange']\n// // orange 2 (3) ['Apple', 'Banana', 'orange']\n// // arry부분은 잘 사용하지 않기 때문에 아래처럼 사용을 많이 한다\n// fruits.forEach(function (element, index) {\n//     console.log(element, index)\n// })      //출력값\n// // Apple 0\n// // Banana 1\n// // orange 2\n// // .map()\n// //forEach()는 반환되는 값이 없는 반면에 map은 반환되는 값이 있다!!\n// const numbers = [1, 2, 3, 4]\n// const fruits = ['Apple', 'Banana', 'orange']\n// const a = fruits.forEach(function (item, i){\n//     console.log(`${item}-${i}`);   \n// }) \n// console.log(a); // 출력값 undefined\n// const b = fruits.map(function (item, i){\n//      return `${item}-${i}`\n// })\n// console.log(b); // 출력값 ['Apple-0', 'Banana-1', 'orange-2']\n// // map()은 객체 리터럴 방식으로도 사용이 가능!\n// const c = fruits.map(function (item, i){\n//     return {\n//         id: i,\n//         name: item\n//     }\n// })\n// console.log(c); // return형식이 객체 데이터를 반환하기 때문에 객체가 담겨진 배열을 const c에 담는다!\n// // 0번 인덱스 값(객체) : {id: 0, name: 'Apple'}\n// // 1번 인덱스 값(객체) : {id: 1, name: 'Banana'}\n// // 2번 인덱스 값(객체) : {id: 2, name: 'orange'}\n// // forEach문과 map함수를 사용한 코드를 람다(화살표)함수로 바꿔보자!\n// const d = fruits.forEach((item, i) => {\n//     console.log(`${item}-${i}`);   \n// }) \n// console.log(d);\n// //map 함수에는 따로 로직이 구현되어있지않고 return만 있기 때문에 중괄호와 return을 생략해서\n// //작성할 수 있다 하지만 반환되는 내용이 객체이기 때문에 ( )소화로호 묶어둔 뒤 그안에 { } 중괄호\n// //를 사용해서 객체를 작성해줘야 한다\n// const e = fruits.map((item, i) =>({ id: i, name: item}))\n// console.log(e);\n//-------------------------------------------------------------------\n// const pi = 3.141592\n// console.log(pi);\n// // 숫자 데이터에 toFixed(표시할 소숫점 자리)를 사용하면 입력된 소숫점 자리 까지만 보여준다\n// const str= pi.toFixed(2)\n// console.log(str);\n// // typeof를 사용하면 어떤 타입의 변수인지 알려준다\n// console.log(typeof str);\n// const integer = parseInt(str)\n// const float = parseFloat(str)\n// console.log(integer);\n// console.log(float);\n// console.log(typeof integer, typeof float);\n// // Math.abs() 함수는 주어진 숫자의 절대값을 반환합니다. \n// // x가 양수이거나 0이라면 x를 리턴하고, x가 음수라면 x의 반대값, 즉 양수를 반환합니다.\n//-------------------------------------------------------------------\n// indexOf를 사용하면 인수값과 일치하는 인덱스번호를 알수있다 \n// 일치하는 값이 없을경우 -1을 반환함!\n// const r = 'Hello world!'.indexOf('w')\n// console.log(r);     //6 출력\n// // length를 사용하면 문자열의 글자가 몇개인지 알수있다\n// const str = '0123'\n// console.log(str.length);        //4 출력\n// console.log('0123'.length);     //4 출력\n// // indexOf 뒤에 (부정비교연산) !== 을 통하여 true||false 값으로 반환 받을 수 있다 \n// const str1 = 'Hello world!'\n// console.log(str1.indexOf('world!') !== -1);     //true 출력\n// // slice(추출을 시작할 인덱스 번호, 추출을 끝낼 인덱스 번호-1)를 사용하면\n// // 문자열의 일부를 추출해서 새로운 문자열을 반환한다\n// const str2 = 'Hello world!'\n// console.log(str2.slice(0,3));   //Hel 출력\n// console.log(str2.slice(6,11));  //world 출력\n// // replace('교체당할 문자열', '교체되어서 들어갈 문자열')을 사용하면\n// // 문자열의 내용을 교체할 수 있다\n// const str3 = 'Hello world!'\n// console.log(str3.replace('world', 'Jinwoong'));  //Hello Jinwoong! 출력\n// console.log(str3.replace('world!', ''));         //Hello 출력\n// // 정규표현식..?\n//  const str4 = 'qwaszx3677@naver.com'\n//  console.log(str4.match(/.+(?=@)/)[0]);  //qwaszx3677 출력\n// // trim() 을 사용하면 불필요한 공백을 삭제시켜준다\n//  const str5 = '    Hello world!   '\n//  console.log(str5);              //    Hello world!    출력(공백 포함)\n//  console.log(str5.trim());       //Hello world! 출력(불필요한 공백 사라짐)\n//-------------------------------------------------------------------\n//상속(확장)\n//  class Vehicle{\n//      constructor(name, wheel){\n//         this.name = name\n//         this.wheel = wheel\n//      }\n//  }\n// const myVehicle = new Vehicle('운송수단',2)\n// console.log(myVehicle)\n// console.log(myVehicle.name)\n// console.log(myVehicle.wheel)\n// extends가 확장(상속)의 의미를 갖게 만드는 키워드입니다.\n// class Bicycle extends Vehicle{\n//      constructor(name, wheel){\n//          super(name,wheel)\n//      }\n//  }\n//  const mYBicycle = new Bicycle('최진웅자전거',2)\n//  console.log(mYBicycle)\n// Bicycle 클래스의 경우 부모클래스가 가지고있는 로직을 가져와서 그대로 사용한 반면에\n// Car 클래스는 부모클래스가 가지고있는 로직에 새로운 로직을 추가해서 사용하고있다\n//  class Car extends Vehicle{\n//      constructor(name, wheel, license){\n//          super(name,wheel)\n//          this.license = license\n//      }\n//  }\n//-------------------------------------------------------------------\n// ES6 Classes\n// const jin = {\n//     name: 'jinwoong',\n//     normal: function () {\n//         console.log(this.name)\n//     },\n//     arrow: () => {\n//         console.log(this.name)\n//     }\n// }\n// jin 객체 안에 normal이라는 이름의 함수를 축약해서 사용할 수 있다.\n// 어떤 이름이 나오고 그 뒤에 소괄호 ( ) 바로 그뒤에 중괄호 { }가 나오면 function 키워드를 사용해서 일반함수로\n// 만드는 개념과 동일하다!\n// const jin = {\n//     name: 'jinwoong',\n//     normal() {\n//         console.log(this.name)\n//     },\n//     arrow: () => {\n//         console.log(this.name)\n//     }\n// }\n// User라는 이름의 생성자 함수 정의\n// function User(first, last){\n//     this.firstName = first\n//     this.lastName = last\n// }\n// 생성자 함수에 getFullName이라는 이름의 프로토타입 함수를 생성\n// User.prototype.getFullName = function () {\n//     return `${this.firstName} ${this.lastName}`\n// }\n// 위의 생성자와 프로토 타입함수를 class로 정의하여 더욱 간결하게 작성해보자\n// class User{\n//     constructor(first, last){   //constructor또한 하나의 함수라고 생각하면 된다\n//         this.firstName = first\n//         this.lastName = last\n//     }\n//     getFullName(){  //프로토타입으로 선언하지않아도 class를 사용하면 함수를 생성할 수 있다!\n//         return `${this.firstName} ${this.lastName}`\n//     }\n// }\n// new를 사용해서 인스턴스(객체) 생성\n// const heropy = new User('Heropy', 'Park')\n// const jin = new User('Jinwoong', 'Choi')\n// const song = new User('Yousong', 'Kim')\n// heropy 부분은 객체 데이터를 출력\n// jin, song은 getFullName함수 호출후 결과값 출력\n// console.log(heropy)\n// console.log(jin.getFullName())\n// console.log(song.getFullName())\n// -------------------------------------------------------------------\n// this\n// 일반(normal) 함수는 호출 위치에 따라 this 정의!\n// 화살표(arrow) 함수는 자신이 선언된 함수 범위에서 this 정의!\n// const t = {\n//     name: 'Heropy',\n//     a :function(() => {\n//         console.log(this.name)\n//     });\n// }\n// heropy.normal()\n// heropy.arrow()\n// const amy = {\n//     name: 'Amy',\n//     normal: heropy.normal,\n//     arrow: heropy.arrow\n// }\n// amy.normal()\n// amy.arrow()\n// const timer = {\n//     name: 'he',\n//     timeout: function() {\n//         setTimeout(function(){\n//             console.log(this.name)\n//         },2000)\n//     }\n// }\n// timer.timeout()\n// const timer = {\n//     name: 'he',\n//     timeout: function() {\n//         setTimeout(() => {\n//             console.log(this.name)\n//         },2000)\n//     }\n// }\n// timer.timeout()\n// function User(name){\n//     this.name = name\n// }\n//-------------------------------------------------------------------\n// const hero ={\n//     firstName : 'heropy',\n//     lastName : 'park',\n//     getFullName : function(){\n//         return `${this.firstName} ${this.lastName}`\n//     }\n// }\n// function User(first, last){\n//     this.firstName = first\n//     this.lastName = last\n// }\n// User.prototype.getFullName = function(){\n//     return `${this.firstName} ${this.lastName}`\n// }\n// const hero = new User('heropy','park')\n// const choi = new User('jinwoong','choi')\n// console.log(hero.getFullName())\n// console.log(choi)\n//-------------------------------------------------------------------\n// 콜백 (Callback)\n// 함수의 인수로 사용되는 함수!\n// setTimeout(함수, 시간)  ==> setTimeout이라는 함수안에 함수를 인수로 사용되니까 이게 콜백!\n// function timeout(){\n//     setTimeout(() =>{\n//         console.log('kkiki')\n//     }, 4000)\n// }\n// timeout()\n// console.log('Done');\n// 이렇게 작성되면~ Done이 먼저 출력된 뒤에 kkiki가 출력된다..ㅜ\n// timeout함수가 다 끝난다음에 Done을 출력하기 위해서는 아래와 같이 해야한다(콜백)\n// function timeout(kiki){\n//     setTimeout(() =>{\n//         console.log('kkiki')\n//         kiki()\n//     }, 4000)\n// }\n// timeout(() => { \n//     console.log('Done');\n// })\n//-------------------------------------------------------------------\n// 타이머 함수\n// setTimeout(함수, 시간) : 일정 시간 후 함수 실행\n// setInterval(함수, 시간) : 시간 간격마다 함수 실행\n// clearTimeout() : 설정된 Timeout 함수를 종료\n// clearInterval() : 설정된 Interval 함수를 종료\n// 익명 함수를 만들어서 넣어도 됨~\n// setTimeout(function() {\n//     console.log('ㅎㅇ');\n// }, 3000);\n// 위의 코드를 람다를 사용해서 바꿔봄 내용은 동일\n// setTimeout(() => {\n//     console.log('ㅎㅇ')\n// }, 3000);\n// setTimeout을 실행하게되면 특정한 timer값이 반환이 되는데\n// 그 값을 timer라는 변수에 한번 받아봄\n// const timer = setTimeout(() => {\n//     console.log('ㅎㅇ')\n// }, 3000);\n// 화면에 Hello world!를 클릭하면 clearTimeout을 사용해서 timer가 종료되도록 만들어봄\n// Hello world! 클릭하면 timer가 종료되어서 함수 실행이 안됨! ㅋㅋㅋ\n// const h1El = document.querySelector('h1');\n// h1El.addEventListener('click', function() {\n//     clearTimeout(timer);\n// })\n// 위의 코드를 람다로 바꿔봤다\n// const h1El = document.querySelector('h1');\n// h1El.addEventListener('click', () => {\n//     clearTimeout(timer);\n// })\n// const timer = setInterval(() => {\n//     console.log('ㅎㅇ')\n// }, 3000);\n// const h1El = document.querySelector('h1');\n// h1El.addEventListener('click', () => {\n//     clearInterval(timer);\n// })\n//-------------------------------------------------------------------\n// 호이스팅\n// 함수 선언부가 유효범위 최상단으로 끌어올려지는 현상\n// const a = 7;\n// const double = function () {\n//     console.log(a * 4);\n// }\n// double()\n//-------------------------------------------------------------------\n// 즉시실행함수\n// IIFE, Immediately-Invoked Function Expreesion\n// const a = 20;\n// function double(){\n//     console.log(a * 2);\n// }\n// double();\n//  위와 같은 방법은 함수를 만들자 마자 바로 써야하는데 함수를 만들어 놓고 호출하는 번거로움이 있다\n// 익명함수를 만들자\n// function () {\n//     console.log(a * 2);\n// }\n// 익명함수를 만들었더니 호출을 하지못해서 쓸수가 없다..\n// 위와같은 상황을 해결하기 위해서는 익명 함수를 ( ) 괄호로 묶어주고 그 뒤에 ( ) 괄호를\n// 한번더 사용한다!\n// (function () {\n//     console.log(a * 2);\n// })()\n// 위의 코드와 똑같은 내용이다! 다만 위의 경우 익명함수를 만들고 ( )를 사용해서\n// 감싸 준 다음 ( )를 한번더 작성했다면 아래의 코드는 익명함수 내부에 ( )를 사용했다!\n// (function () {\n//     console.log(a * 2);\n// }())\n//-------------------------------------------------------------------\n// 화살표 함수\n// () => {}       vs     function ()  {}\n// const double = function (x) {\n//     return x*2;\n// }\n// console.log('double : ', double(7));\n// const doubleArrow = (x) => {\n//     return x*2;\n// }\n// console.log('doubleArrow : ', doubleArrow(7));\n// const doubleArrow = (x) => x*2\n// console.log('doubleArrow : ', doubleArrow(7));\n// const doubleArrow = (x) => ({\n//     name : 'woong'\n//  })\n//  console.log('doubleArrow : ', doubleArrow(7).name);\n// const sum = function (x, y){\n//     return x+y;\n// }\n// console.log(sum(1 ,10));\n// const sumArrow = (x, y) => {\n//     return x+y;\n// }\n// console.log(sumArrow(1 ,10));\n// const sumArrow = (x, y) => x+y\n// console.log(sumArrow(1 ,10));\n//-------------------------------------------------------------------\n// 함수 복습\n// \"함수선언방식\"\n// function sum(x, y){\n//     return x+y;\n// }\n// console.log(sum(1,30));\n// 함수의 이름을 작성하지않는 익명 함수를 만들어서 변수에 담에서 사용하는 \"함수표현방식\"\n// const sum = function (x, y){\n//     return x+y;\n// }\n// arguments는 함수를 실행할때 전달받은 인수의 값들을 제로베이스드 배열형태로 알아서 저장해준다\n// 따라서 매개변수를 입력하지 않고도 함수사용이 가능하다!\n//  function sum (){\n//     return arguments[0] + arguments[1];\n// }\n// sum(1 ,10);\n// ------------------------------------------------------------\n// const ulEl = document.querySelector('ul');\n// for(let i = 0 ; i < 10 ; i++){\n//     const li = document.createElement('li');\n//     li.textContent=`List-${i+1}`;\n//     if(i % 2){\n//         li.addEventListener('click',function(){\n//             console.log(li.textContent);\n//         })\n//     }\n//     ulEl.appendChild(li);\n// }\n// if(1){\n//     console.log('ㅎㅇㅎㅇ');\n//     console.log(ulEl);\n// }"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"main.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"main.js","original":{"line":2,"column":0}},{"generated":{"line":3,"column":0},"source":"main.js","original":{"line":3,"column":0}},{"generated":{"line":4,"column":0},"source":"main.js","original":{"line":4,"column":0}},{"generated":{"line":5,"column":0},"source":"main.js","original":{"line":5,"column":0}},{"generated":{"line":6,"column":0},"source":"main.js","original":{"line":6,"column":0}},{"generated":{"line":7,"column":0},"source":"main.js","original":{"line":8,"column":0}},{"generated":{"line":8,"column":0},"source":"main.js","original":{"line":9,"column":0}},{"generated":{"line":9,"column":0},"source":"main.js","original":{"line":11,"column":0}},{"generated":{"line":10,"column":0},"source":"main.js","original":{"line":12,"column":0}},{"name":"userAge","generated":{"line":10,"column":4},"source":"main.js","original":{"line":12,"column":6}},{"generated":{"line":10,"column":11},"source":"main.js","original":{"line":12,"column":13}},{"generated":{"line":10,"column":14},"source":"main.js","original":{"line":12,"column":16}},{"generated":{"line":11,"column":0},"source":"main.js","original":{"line":13,"column":4}},{"name":"name","generated":{"line":12,"column":0},"source":"main.js","original":{"line":14,"column":4}},{"name":"name","generated":{"line":12,"column":2},"source":"main.js","original":{"line":14,"column":4}},{"generated":{"line":12,"column":6},"source":"main.js","original":{"line":14,"column":8}},{"generated":{"line":12,"column":8},"source":"main.js","original":{"line":14,"column":10}},{"generated":{"line":12,"column":18},"source":"main.js","original":{"line":12,"column":16}},{"name":"age","generated":{"line":13,"column":0},"source":"main.js","original":{"line":15,"column":4}},{"name":"age","generated":{"line":13,"column":2},"source":"main.js","original":{"line":15,"column":4}},{"generated":{"line":13,"column":5},"source":"main.js","original":{"line":15,"column":7}},{"generated":{"line":13,"column":7},"source":"main.js","original":{"line":15,"column":9}},{"generated":{"line":14,"column":0},"source":"main.js","original":{"line":12,"column":16}},{"generated":{"line":14,"column":1},"source":"main.js","original":{"line":12,"column":0}},{"generated":{"line":15,"column":0},"source":"main.js","original":{"line":17,"column":0}},{"name":"userEmail","generated":{"line":15,"column":4},"source":"main.js","original":{"line":17,"column":6}},{"generated":{"line":15,"column":13},"source":"main.js","original":{"line":17,"column":15}},{"generated":{"line":15,"column":16},"source":"main.js","original":{"line":17,"column":18}},{"name":"name","generated":{"line":16,"column":0},"source":"main.js","original":{"line":18,"column":4}},{"name":"name","generated":{"line":16,"column":2},"source":"main.js","original":{"line":18,"column":4}},{"generated":{"line":16,"column":6},"source":"main.js","original":{"line":18,"column":8}},{"generated":{"line":16,"column":8},"source":"main.js","original":{"line":18,"column":10}},{"generated":{"line":16,"column":18},"source":"main.js","original":{"line":17,"column":18}},{"name":"email","generated":{"line":17,"column":0},"source":"main.js","original":{"line":19,"column":4}},{"name":"email","generated":{"line":17,"column":2},"source":"main.js","original":{"line":19,"column":4}},{"generated":{"line":17,"column":7},"source":"main.js","original":{"line":19,"column":9}},{"generated":{"line":17,"column":9},"source":"main.js","original":{"line":19,"column":11}},{"generated":{"line":18,"column":0},"source":"main.js","original":{"line":17,"column":18}},{"generated":{"line":18,"column":1},"source":"main.js","original":{"line":17,"column":0}},{"generated":{"line":19,"column":0},"source":"main.js","original":{"line":22,"column":0}},{"name":"target","generated":{"line":19,"column":4},"source":"main.js","original":{"line":22,"column":6}},{"generated":{"line":19,"column":10},"source":"main.js","original":{"line":22,"column":12}},{"name":"Object","generated":{"line":19,"column":13},"source":"main.js","original":{"line":22,"column":15}},{"generated":{"line":19,"column":19},"source":"main.js","original":{"line":22,"column":21}},{"name":"assign","generated":{"line":19,"column":20},"source":"main.js","original":{"line":22,"column":22}},{"generated":{"line":19,"column":26},"source":"main.js","original":{"line":22,"column":15}},{"name":"userAge","generated":{"line":19,"column":27},"source":"main.js","original":{"line":22,"column":29}},{"generated":{"line":19,"column":34},"source":"main.js","original":{"line":22,"column":15}},{"name":"userEmail","generated":{"line":19,"column":36},"source":"main.js","original":{"line":22,"column":38}},{"generated":{"line":19,"column":45},"source":"main.js","original":{"line":22,"column":15}},{"generated":{"line":19,"column":46},"source":"main.js","original":{"line":22,"column":0}},{"name":"console","generated":{"line":20,"column":0},"source":"main.js","original":{"line":23,"column":0}},{"generated":{"line":20,"column":7},"source":"main.js","original":{"line":23,"column":7}},{"name":"log","generated":{"line":20,"column":8},"source":"main.js","original":{"line":23,"column":8}},{"generated":{"line":20,"column":11},"source":"main.js","original":{"line":23,"column":0}},{"name":"target","generated":{"line":20,"column":12},"source":"main.js","original":{"line":23,"column":12}},{"generated":{"line":20,"column":18},"source":"main.js","original":{"line":23,"column":0}},{"name":"console","generated":{"line":21,"column":0},"source":"main.js","original":{"line":24,"column":0}},{"generated":{"line":21,"column":7},"source":"main.js","original":{"line":24,"column":7}},{"name":"log","generated":{"line":21,"column":8},"source":"main.js","original":{"line":24,"column":8}},{"generated":{"line":21,"column":11},"source":"main.js","original":{"line":24,"column":0}},{"name":"userAge","generated":{"line":21,"column":12},"source":"main.js","original":{"line":24,"column":12}},{"generated":{"line":21,"column":19},"source":"main.js","original":{"line":24,"column":0}},{"name":"console","generated":{"line":22,"column":0},"source":"main.js","original":{"line":25,"column":0}},{"generated":{"line":22,"column":7},"source":"main.js","original":{"line":25,"column":7}},{"name":"log","generated":{"line":22,"column":8},"source":"main.js","original":{"line":25,"column":8}},{"generated":{"line":22,"column":11},"source":"main.js","original":{"line":25,"column":0}},{"name":"target","generated":{"line":22,"column":12},"source":"main.js","original":{"line":25,"column":12}},{"generated":{"line":22,"column":18},"source":"main.js","original":{"line":25,"column":18}},{"name":"userAge","generated":{"line":22,"column":23},"source":"main.js","original":{"line":25,"column":23}},{"generated":{"line":22,"column":30},"source":"main.js","original":{"line":25,"column":0}},{"generated":{"line":23,"column":0},"source":"main.js","original":{"line":27,"column":0}},{"name":"a","generated":{"line":23,"column":4},"source":"main.js","original":{"line":27,"column":6}},{"generated":{"line":23,"column":5},"source":"main.js","original":{"line":27,"column":7}},{"generated":{"line":23,"column":8},"source":"main.js","original":{"line":27,"column":10}},{"name":"k","generated":{"line":24,"column":0},"source":"main.js","original":{"line":27,"column":11}},{"name":"k","generated":{"line":24,"column":2},"source":"main.js","original":{"line":27,"column":11}},{"generated":{"line":24,"column":3},"source":"main.js","original":{"line":27,"column":12}},{"generated":{"line":24,"column":5},"source":"main.js","original":{"line":27,"column":14}},{"generated":{"line":25,"column":0},"source":"main.js","original":{"line":27,"column":10}},{"generated":{"line":25,"column":1},"source":"main.js","original":{"line":27,"column":0}},{"generated":{"line":26,"column":0},"source":"main.js","original":{"line":28,"column":0}},{"name":"b","generated":{"line":26,"column":4},"source":"main.js","original":{"line":28,"column":6}},{"generated":{"line":26,"column":5},"source":"main.js","original":{"line":28,"column":7}},{"generated":{"line":26,"column":8},"source":"main.js","original":{"line":28,"column":10}},{"name":"k","generated":{"line":27,"column":0},"source":"main.js","original":{"line":28,"column":11}},{"name":"k","generated":{"line":27,"column":2},"source":"main.js","original":{"line":28,"column":11}},{"generated":{"line":27,"column":3},"source":"main.js","original":{"line":28,"column":12}},{"generated":{"line":27,"column":5},"source":"main.js","original":{"line":28,"column":14}},{"generated":{"line":28,"column":0},"source":"main.js","original":{"line":28,"column":10}},{"generated":{"line":28,"column":1},"source":"main.js","original":{"line":28,"column":0}},{"name":"console","generated":{"line":29,"column":0},"source":"main.js","original":{"line":29,"column":0}},{"generated":{"line":29,"column":7},"source":"main.js","original":{"line":29,"column":7}},{"name":"log","generated":{"line":29,"column":8},"source":"main.js","original":{"line":29,"column":8}},{"generated":{"line":29,"column":11},"source":"main.js","original":{"line":29,"column":0}},{"name":"a","generated":{"line":29,"column":12},"source":"main.js","original":{"line":29,"column":12}},{"generated":{"line":29,"column":13},"source":"main.js","original":{"line":29,"column":13}},{"name":"b","generated":{"line":29,"column":18},"source":"main.js","original":{"line":29,"column":18}},{"generated":{"line":29,"column":19},"source":"main.js","original":{"line":29,"column":0}},{"generated":{"line":29,"column":22},"source":"main.js","original":{"line":32,"column":0}},{"generated":{"line":30,"column":0},"source":"main.js","original":{"line":33,"column":0}},{"generated":{"line":31,"column":0},"source":"main.js","original":{"line":34,"column":0}},{"generated":{"line":32,"column":0},"source":"main.js","original":{"line":35,"column":0}},{"generated":{"line":33,"column":0},"source":"main.js","original":{"line":37,"column":0}},{"generated":{"line":34,"column":0},"source":"main.js","original":{"line":38,"column":0}},{"generated":{"line":35,"column":0},"source":"main.js","original":{"line":39,"column":0}},{"generated":{"line":36,"column":0},"source":"main.js","original":{"line":40,"column":0}},{"generated":{"line":37,"column":0},"source":"main.js","original":{"line":41,"column":0}},{"generated":{"line":38,"column":0},"source":"main.js","original":{"line":42,"column":0}},{"generated":{"line":39,"column":0},"source":"main.js","original":{"line":43,"column":0}},{"generated":{"line":40,"column":0},"source":"main.js","original":{"line":45,"column":0}},{"generated":{"line":41,"column":0},"source":"main.js","original":{"line":46,"column":0}},{"generated":{"line":42,"column":0},"source":"main.js","original":{"line":47,"column":0}},{"generated":{"line":43,"column":0},"source":"main.js","original":{"line":48,"column":0}},{"generated":{"line":44,"column":0},"source":"main.js","original":{"line":49,"column":0}},{"generated":{"line":45,"column":0},"source":"main.js","original":{"line":50,"column":0}},{"generated":{"line":46,"column":0},"source":"main.js","original":{"line":51,"column":0}},{"generated":{"line":47,"column":0},"source":"main.js","original":{"line":54,"column":0}},{"generated":{"line":48,"column":0},"source":"main.js","original":{"line":55,"column":0}},{"generated":{"line":49,"column":0},"source":"main.js","original":{"line":56,"column":0}},{"generated":{"line":50,"column":0},"source":"main.js","original":{"line":58,"column":0}},{"generated":{"line":51,"column":0},"source":"main.js","original":{"line":59,"column":0}},{"generated":{"line":52,"column":0},"source":"main.js","original":{"line":60,"column":0}},{"generated":{"line":53,"column":0},"source":"main.js","original":{"line":61,"column":0}},{"generated":{"line":54,"column":0},"source":"main.js","original":{"line":62,"column":0}},{"generated":{"line":55,"column":0},"source":"main.js","original":{"line":63,"column":0}},{"generated":{"line":56,"column":0},"source":"main.js","original":{"line":64,"column":0}},{"generated":{"line":57,"column":0},"source":"main.js","original":{"line":65,"column":0}},{"generated":{"line":58,"column":0},"source":"main.js","original":{"line":67,"column":0}},{"generated":{"line":59,"column":0},"source":"main.js","original":{"line":68,"column":0}},{"generated":{"line":60,"column":0},"source":"main.js","original":{"line":69,"column":0}},{"generated":{"line":61,"column":0},"source":"main.js","original":{"line":70,"column":0}},{"generated":{"line":62,"column":0},"source":"main.js","original":{"line":71,"column":0}},{"generated":{"line":63,"column":0},"source":"main.js","original":{"line":72,"column":0}},{"generated":{"line":64,"column":0},"source":"main.js","original":{"line":73,"column":0}},{"generated":{"line":65,"column":0},"source":"main.js","original":{"line":76,"column":0}},{"generated":{"line":66,"column":0},"source":"main.js","original":{"line":77,"column":0}},{"generated":{"line":67,"column":0},"source":"main.js","original":{"line":78,"column":0}},{"generated":{"line":68,"column":0},"source":"main.js","original":{"line":80,"column":0}},{"generated":{"line":69,"column":0},"source":"main.js","original":{"line":81,"column":0}},{"generated":{"line":70,"column":0},"source":"main.js","original":{"line":82,"column":0}},{"generated":{"line":71,"column":0},"source":"main.js","original":{"line":84,"column":0}},{"generated":{"line":72,"column":0},"source":"main.js","original":{"line":85,"column":0}},{"generated":{"line":73,"column":0},"source":"main.js","original":{"line":86,"column":0}},{"generated":{"line":74,"column":0},"source":"main.js","original":{"line":89,"column":0}},{"generated":{"line":75,"column":0},"source":"main.js","original":{"line":90,"column":0}},{"generated":{"line":76,"column":0},"source":"main.js","original":{"line":91,"column":0}},{"generated":{"line":77,"column":0},"source":"main.js","original":{"line":92,"column":0}},{"generated":{"line":78,"column":0},"source":"main.js","original":{"line":93,"column":0}},{"generated":{"line":79,"column":0},"source":"main.js","original":{"line":95,"column":0}},{"generated":{"line":80,"column":0},"source":"main.js","original":{"line":96,"column":0}},{"generated":{"line":81,"column":0},"source":"main.js","original":{"line":97,"column":0}},{"generated":{"line":82,"column":0},"source":"main.js","original":{"line":99,"column":0}},{"generated":{"line":83,"column":0},"source":"main.js","original":{"line":100,"column":0}},{"generated":{"line":84,"column":0},"source":"main.js","original":{"line":101,"column":0}},{"generated":{"line":85,"column":0},"source":"main.js","original":{"line":104,"column":0}},{"generated":{"line":86,"column":0},"source":"main.js","original":{"line":105,"column":0}},{"generated":{"line":87,"column":0},"source":"main.js","original":{"line":106,"column":0}},{"generated":{"line":88,"column":0},"source":"main.js","original":{"line":107,"column":0}},{"generated":{"line":89,"column":0},"source":"main.js","original":{"line":109,"column":0}},{"generated":{"line":90,"column":0},"source":"main.js","original":{"line":110,"column":0}},{"generated":{"line":91,"column":0},"source":"main.js","original":{"line":112,"column":0}},{"generated":{"line":92,"column":0},"source":"main.js","original":{"line":113,"column":0}},{"generated":{"line":93,"column":0},"source":"main.js","original":{"line":115,"column":0}},{"generated":{"line":94,"column":0},"source":"main.js","original":{"line":116,"column":0}},{"generated":{"line":95,"column":0},"source":"main.js","original":{"line":119,"column":0}},{"generated":{"line":96,"column":0},"source":"main.js","original":{"line":120,"column":0}},{"generated":{"line":97,"column":0},"source":"main.js","original":{"line":121,"column":0}},{"generated":{"line":98,"column":0},"source":"main.js","original":{"line":122,"column":0}},{"generated":{"line":99,"column":0},"source":"main.js","original":{"line":124,"column":0}},{"generated":{"line":100,"column":0},"source":"main.js","original":{"line":125,"column":0}},{"generated":{"line":101,"column":0},"source":"main.js","original":{"line":126,"column":0}},{"generated":{"line":102,"column":0},"source":"main.js","original":{"line":128,"column":0}},{"generated":{"line":103,"column":0},"source":"main.js","original":{"line":129,"column":0}},{"generated":{"line":104,"column":0},"source":"main.js","original":{"line":130,"column":0}},{"generated":{"line":105,"column":0},"source":"main.js","original":{"line":133,"column":0}},{"generated":{"line":106,"column":0},"source":"main.js","original":{"line":134,"column":0}},{"generated":{"line":107,"column":0},"source":"main.js","original":{"line":135,"column":0}},{"generated":{"line":108,"column":0},"source":"main.js","original":{"line":137,"column":0}},{"generated":{"line":109,"column":0},"source":"main.js","original":{"line":138,"column":0}},{"generated":{"line":110,"column":0},"source":"main.js","original":{"line":139,"column":0}},{"generated":{"line":111,"column":0},"source":"main.js","original":{"line":141,"column":0}},{"generated":{"line":112,"column":0},"source":"main.js","original":{"line":142,"column":0}},{"generated":{"line":113,"column":0},"source":"main.js","original":{"line":143,"column":0}},{"generated":{"line":114,"column":0},"source":"main.js","original":{"line":144,"column":0}},{"generated":{"line":115,"column":0},"source":"main.js","original":{"line":145,"column":0}},{"generated":{"line":116,"column":0},"source":"main.js","original":{"line":148,"column":0}},{"generated":{"line":117,"column":0},"source":"main.js","original":{"line":149,"column":0}},{"generated":{"line":118,"column":0},"source":"main.js","original":{"line":150,"column":0}},{"generated":{"line":119,"column":0},"source":"main.js","original":{"line":151,"column":0}},{"generated":{"line":120,"column":0},"source":"main.js","original":{"line":152,"column":0}},{"generated":{"line":121,"column":0},"source":"main.js","original":{"line":153,"column":0}},{"generated":{"line":122,"column":0},"source":"main.js","original":{"line":154,"column":0}},{"generated":{"line":123,"column":0},"source":"main.js","original":{"line":157,"column":0}},{"generated":{"line":124,"column":0},"source":"main.js","original":{"line":158,"column":0}},{"generated":{"line":125,"column":0},"source":"main.js","original":{"line":159,"column":0}},{"generated":{"line":126,"column":0},"source":"main.js","original":{"line":161,"column":0}},{"generated":{"line":127,"column":0},"source":"main.js","original":{"line":162,"column":0}},{"generated":{"line":128,"column":0},"source":"main.js","original":{"line":163,"column":0}},{"generated":{"line":129,"column":0},"source":"main.js","original":{"line":164,"column":0}},{"generated":{"line":130,"column":0},"source":"main.js","original":{"line":168,"column":0}},{"generated":{"line":131,"column":0},"source":"main.js","original":{"line":169,"column":0}},{"generated":{"line":132,"column":0},"source":"main.js","original":{"line":170,"column":0}},{"generated":{"line":133,"column":0},"source":"main.js","original":{"line":171,"column":0}},{"generated":{"line":134,"column":0},"source":"main.js","original":{"line":173,"column":0}},{"generated":{"line":135,"column":0},"source":"main.js","original":{"line":174,"column":0}},{"generated":{"line":136,"column":0},"source":"main.js","original":{"line":175,"column":0}},{"generated":{"line":137,"column":0},"source":"main.js","original":{"line":176,"column":0}},{"generated":{"line":138,"column":0},"source":"main.js","original":{"line":177,"column":0}},{"generated":{"line":139,"column":0},"source":"main.js","original":{"line":178,"column":0}},{"generated":{"line":140,"column":0},"source":"main.js","original":{"line":179,"column":0}},{"generated":{"line":141,"column":0},"source":"main.js","original":{"line":180,"column":0}},{"generated":{"line":142,"column":0},"source":"main.js","original":{"line":181,"column":0}},{"generated":{"line":143,"column":0},"source":"main.js","original":{"line":182,"column":0}},{"generated":{"line":144,"column":0},"source":"main.js","original":{"line":183,"column":0}},{"generated":{"line":145,"column":0},"source":"main.js","original":{"line":185,"column":0}},{"generated":{"line":146,"column":0},"source":"main.js","original":{"line":186,"column":0}},{"generated":{"line":147,"column":0},"source":"main.js","original":{"line":187,"column":0}},{"generated":{"line":148,"column":0},"source":"main.js","original":{"line":188,"column":0}},{"generated":{"line":149,"column":0},"source":"main.js","original":{"line":189,"column":0}},{"generated":{"line":150,"column":0},"source":"main.js","original":{"line":190,"column":0}},{"generated":{"line":151,"column":0},"source":"main.js","original":{"line":191,"column":0}},{"generated":{"line":152,"column":0},"source":"main.js","original":{"line":194,"column":0}},{"generated":{"line":153,"column":0},"source":"main.js","original":{"line":195,"column":0}},{"generated":{"line":154,"column":0},"source":"main.js","original":{"line":196,"column":0}},{"generated":{"line":155,"column":0},"source":"main.js","original":{"line":197,"column":0}},{"generated":{"line":156,"column":0},"source":"main.js","original":{"line":199,"column":0}},{"generated":{"line":157,"column":0},"source":"main.js","original":{"line":200,"column":0}},{"generated":{"line":158,"column":0},"source":"main.js","original":{"line":201,"column":0}},{"generated":{"line":159,"column":0},"source":"main.js","original":{"line":202,"column":0}},{"generated":{"line":160,"column":0},"source":"main.js","original":{"line":204,"column":0}},{"generated":{"line":161,"column":0},"source":"main.js","original":{"line":205,"column":0}},{"generated":{"line":162,"column":0},"source":"main.js","original":{"line":206,"column":0}},{"generated":{"line":163,"column":0},"source":"main.js","original":{"line":207,"column":0}},{"generated":{"line":164,"column":0},"source":"main.js","original":{"line":209,"column":0}},{"generated":{"line":165,"column":0},"source":"main.js","original":{"line":210,"column":0}},{"generated":{"line":166,"column":0},"source":"main.js","original":{"line":211,"column":0}},{"generated":{"line":167,"column":0},"source":"main.js","original":{"line":212,"column":0}},{"generated":{"line":168,"column":0},"source":"main.js","original":{"line":213,"column":0}},{"generated":{"line":169,"column":0},"source":"main.js","original":{"line":214,"column":0}},{"generated":{"line":170,"column":0},"source":"main.js","original":{"line":215,"column":0}},{"generated":{"line":171,"column":0},"source":"main.js","original":{"line":216,"column":0}},{"generated":{"line":172,"column":0},"source":"main.js","original":{"line":217,"column":0}},{"generated":{"line":173,"column":0},"source":"main.js","original":{"line":218,"column":0}},{"generated":{"line":174,"column":0},"source":"main.js","original":{"line":219,"column":0}},{"generated":{"line":175,"column":0},"source":"main.js","original":{"line":222,"column":0}},{"generated":{"line":176,"column":0},"source":"main.js","original":{"line":223,"column":0}},{"generated":{"line":177,"column":0},"source":"main.js","original":{"line":224,"column":0}},{"generated":{"line":178,"column":0},"source":"main.js","original":{"line":225,"column":0}},{"generated":{"line":179,"column":0},"source":"main.js","original":{"line":226,"column":0}},{"generated":{"line":180,"column":0},"source":"main.js","original":{"line":228,"column":0}},{"generated":{"line":181,"column":0},"source":"main.js","original":{"line":229,"column":0}},{"generated":{"line":182,"column":0},"source":"main.js","original":{"line":230,"column":0}},{"generated":{"line":183,"column":0},"source":"main.js","original":{"line":231,"column":0}},{"generated":{"line":184,"column":0},"source":"main.js","original":{"line":232,"column":0}},{"generated":{"line":185,"column":0},"source":"main.js","original":{"line":235,"column":0}},{"generated":{"line":186,"column":0},"source":"main.js","original":{"line":236,"column":0}},{"generated":{"line":187,"column":0},"source":"main.js","original":{"line":237,"column":0}},{"generated":{"line":188,"column":0},"source":"main.js","original":{"line":239,"column":0}},{"generated":{"line":189,"column":0},"source":"main.js","original":{"line":240,"column":0}},{"generated":{"line":190,"column":0},"source":"main.js","original":{"line":241,"column":0}},{"generated":{"line":191,"column":0},"source":"main.js","original":{"line":242,"column":0}},{"generated":{"line":192,"column":0},"source":"main.js","original":{"line":243,"column":0}},{"generated":{"line":193,"column":0},"source":"main.js","original":{"line":245,"column":0}},{"generated":{"line":194,"column":0},"source":"main.js","original":{"line":246,"column":0}},{"generated":{"line":195,"column":0},"source":"main.js","original":{"line":247,"column":0}},{"generated":{"line":196,"column":0},"source":"main.js","original":{"line":248,"column":0}},{"generated":{"line":197,"column":0},"source":"main.js","original":{"line":249,"column":0}},{"generated":{"line":198,"column":0},"source":"main.js","original":{"line":252,"column":0}},{"generated":{"line":199,"column":0},"source":"main.js","original":{"line":253,"column":0}},{"generated":{"line":200,"column":0},"source":"main.js","original":{"line":259,"column":0}},{"generated":{"line":201,"column":0},"source":"main.js","original":{"line":260,"column":0}},{"generated":{"line":202,"column":0},"source":"main.js","original":{"line":261,"column":0}},{"generated":{"line":203,"column":0},"source":"main.js","original":{"line":262,"column":0}},{"generated":{"line":204,"column":0},"source":"main.js","original":{"line":263,"column":0}},{"generated":{"line":205,"column":0},"source":"main.js","original":{"line":266,"column":0}},{"generated":{"line":206,"column":0},"source":"main.js","original":{"line":267,"column":0}},{"generated":{"line":207,"column":0},"source":"main.js","original":{"line":268,"column":0}},{"generated":{"line":208,"column":0},"source":"main.js","original":{"line":269,"column":0}},{"generated":{"line":209,"column":0},"source":"main.js","original":{"line":271,"column":0}},{"generated":{"line":210,"column":0},"source":"main.js","original":{"line":272,"column":0}},{"generated":{"line":211,"column":0},"source":"main.js","original":{"line":273,"column":0}},{"generated":{"line":212,"column":0},"source":"main.js","original":{"line":276,"column":0}},{"generated":{"line":213,"column":0},"source":"main.js","original":{"line":277,"column":0}},{"generated":{"line":214,"column":0},"source":"main.js","original":{"line":278,"column":0}},{"generated":{"line":215,"column":0},"source":"main.js","original":{"line":279,"column":0}},{"generated":{"line":216,"column":0},"source":"main.js","original":{"line":280,"column":0}},{"generated":{"line":217,"column":0},"source":"main.js","original":{"line":283,"column":0}},{"generated":{"line":218,"column":0},"source":"main.js","original":{"line":284,"column":0}},{"generated":{"line":219,"column":0},"source":"main.js","original":{"line":285,"column":0}},{"generated":{"line":220,"column":0},"source":"main.js","original":{"line":286,"column":0}},{"generated":{"line":221,"column":0},"source":"main.js","original":{"line":287,"column":0}},{"generated":{"line":222,"column":0},"source":"main.js","original":{"line":290,"column":0}},{"generated":{"line":223,"column":0},"source":"main.js","original":{"line":291,"column":0}},{"generated":{"line":224,"column":0},"source":"main.js","original":{"line":292,"column":0}},{"generated":{"line":225,"column":0},"source":"main.js","original":{"line":295,"column":0}},{"generated":{"line":226,"column":0},"source":"main.js","original":{"line":296,"column":0}},{"generated":{"line":227,"column":0},"source":"main.js","original":{"line":297,"column":0}},{"generated":{"line":228,"column":0},"source":"main.js","original":{"line":298,"column":0}},{"generated":{"line":229,"column":0},"source":"main.js","original":{"line":304,"column":0}},{"generated":{"line":230,"column":0},"source":"main.js","original":{"line":305,"column":1}},{"generated":{"line":231,"column":0},"source":"main.js","original":{"line":308,"column":0}},{"generated":{"line":232,"column":0},"source":"main.js","original":{"line":309,"column":0}},{"generated":{"line":233,"column":0},"source":"main.js","original":{"line":310,"column":0}},{"generated":{"line":234,"column":0},"source":"main.js","original":{"line":311,"column":0}},{"generated":{"line":235,"column":0},"source":"main.js","original":{"line":312,"column":0}},{"generated":{"line":236,"column":0},"source":"main.js","original":{"line":313,"column":0}},{"generated":{"line":237,"column":0},"source":"main.js","original":{"line":314,"column":0}},{"generated":{"line":238,"column":0},"source":"main.js","original":{"line":315,"column":0}},{"generated":{"line":239,"column":0},"source":"main.js","original":{"line":316,"column":0}},{"generated":{"line":240,"column":0},"source":"main.js","original":{"line":317,"column":0}},{"generated":{"line":241,"column":0},"source":"main.js","original":{"line":319,"column":0}},{"generated":{"line":242,"column":0},"source":"main.js","original":{"line":320,"column":0}},{"generated":{"line":243,"column":0},"source":"main.js","original":{"line":321,"column":0}},{"generated":{"line":244,"column":0},"source":"main.js","original":{"line":322,"column":0}},{"generated":{"line":245,"column":0},"source":"main.js","original":{"line":323,"column":0}},{"generated":{"line":246,"column":0},"source":"main.js","original":{"line":324,"column":0}},{"generated":{"line":247,"column":0},"source":"main.js","original":{"line":325,"column":0}},{"generated":{"line":248,"column":0},"source":"main.js","original":{"line":326,"column":0}},{"generated":{"line":249,"column":0},"source":"main.js","original":{"line":329,"column":0}},{"generated":{"line":250,"column":0},"source":"main.js","original":{"line":330,"column":0}},{"generated":{"line":251,"column":0},"source":"main.js","original":{"line":331,"column":0}},{"generated":{"line":252,"column":0},"source":"main.js","original":{"line":332,"column":0}},{"generated":{"line":253,"column":0},"source":"main.js","original":{"line":333,"column":0}},{"generated":{"line":254,"column":0},"source":"main.js","original":{"line":334,"column":0}},{"generated":{"line":255,"column":0},"source":"main.js","original":{"line":335,"column":0}},{"generated":{"line":256,"column":0},"source":"main.js","original":{"line":336,"column":0}},{"generated":{"line":257,"column":0},"source":"main.js","original":{"line":343,"column":0}},{"generated":{"line":258,"column":0},"source":"main.js","original":{"line":344,"column":0}},{"generated":{"line":259,"column":0},"source":"main.js","original":{"line":347,"column":0}},{"generated":{"line":260,"column":0},"source":"main.js","original":{"line":348,"column":0}},{"generated":{"line":261,"column":0},"source":"main.js","original":{"line":349,"column":0}},{"generated":{"line":262,"column":0},"source":"main.js","original":{"line":350,"column":0}},{"generated":{"line":263,"column":0},"source":"main.js","original":{"line":351,"column":0}},{"generated":{"line":264,"column":0},"source":"main.js","original":{"line":352,"column":0}},{"generated":{"line":265,"column":0},"source":"main.js","original":{"line":353,"column":0}},{"generated":{"line":266,"column":0},"source":"main.js","original":{"line":354,"column":0}},{"generated":{"line":267,"column":0},"source":"main.js","original":{"line":355,"column":0}},{"generated":{"line":268,"column":0},"source":"main.js","original":{"line":357,"column":0}},{"generated":{"line":269,"column":0},"source":"main.js","original":{"line":358,"column":0}},{"generated":{"line":270,"column":0},"source":"main.js","original":{"line":359,"column":0}},{"generated":{"line":271,"column":0},"source":"main.js","original":{"line":360,"column":0}},{"generated":{"line":272,"column":0},"source":"main.js","original":{"line":361,"column":0}},{"generated":{"line":273,"column":0},"source":"main.js","original":{"line":362,"column":0}},{"generated":{"line":274,"column":0},"source":"main.js","original":{"line":363,"column":0}},{"generated":{"line":275,"column":0},"source":"main.js","original":{"line":364,"column":0}},{"generated":{"line":276,"column":0},"source":"main.js","original":{"line":365,"column":0}},{"generated":{"line":277,"column":0},"source":"main.js","original":{"line":366,"column":0}},{"generated":{"line":278,"column":0},"source":"main.js","original":{"line":367,"column":0}},{"generated":{"line":279,"column":0},"source":"main.js","original":{"line":368,"column":0}},{"generated":{"line":280,"column":0},"source":"main.js","original":{"line":371,"column":0}},{"generated":{"line":281,"column":0},"source":"main.js","original":{"line":372,"column":0}},{"generated":{"line":282,"column":0},"source":"main.js","original":{"line":373,"column":0}},{"generated":{"line":283,"column":0},"source":"main.js","original":{"line":374,"column":0}},{"generated":{"line":284,"column":0},"source":"main.js","original":{"line":375,"column":0}},{"generated":{"line":285,"column":0},"source":"main.js","original":{"line":376,"column":0}},{"generated":{"line":286,"column":0},"source":"main.js","original":{"line":377,"column":0}},{"generated":{"line":287,"column":0},"source":"main.js","original":{"line":378,"column":0}},{"generated":{"line":288,"column":0},"source":"main.js","original":{"line":379,"column":0}},{"generated":{"line":289,"column":0},"source":"main.js","original":{"line":381,"column":0}},{"generated":{"line":290,"column":0},"source":"main.js","original":{"line":382,"column":0}},{"generated":{"line":291,"column":0},"source":"main.js","original":{"line":383,"column":0}},{"generated":{"line":292,"column":0},"source":"main.js","original":{"line":384,"column":0}},{"generated":{"line":293,"column":0},"source":"main.js","original":{"line":385,"column":0}},{"generated":{"line":294,"column":0},"source":"main.js","original":{"line":386,"column":0}},{"generated":{"line":295,"column":0},"source":"main.js","original":{"line":387,"column":0}},{"generated":{"line":296,"column":0},"source":"main.js","original":{"line":388,"column":0}},{"generated":{"line":297,"column":0},"source":"main.js","original":{"line":389,"column":0}},{"generated":{"line":298,"column":0},"source":"main.js","original":{"line":390,"column":0}},{"generated":{"line":299,"column":0},"source":"main.js","original":{"line":393,"column":0}},{"generated":{"line":300,"column":0},"source":"main.js","original":{"line":394,"column":0}},{"generated":{"line":301,"column":0},"source":"main.js","original":{"line":395,"column":0}},{"generated":{"line":302,"column":0},"source":"main.js","original":{"line":396,"column":0}},{"generated":{"line":303,"column":0},"source":"main.js","original":{"line":397,"column":0}},{"generated":{"line":304,"column":0},"source":"main.js","original":{"line":398,"column":0}},{"generated":{"line":305,"column":0},"source":"main.js","original":{"line":399,"column":0}},{"generated":{"line":306,"column":0},"source":"main.js","original":{"line":400,"column":0}},{"generated":{"line":307,"column":0},"source":"main.js","original":{"line":401,"column":0}},{"generated":{"line":308,"column":0},"source":"main.js","original":{"line":408,"column":0}},{"generated":{"line":309,"column":0},"source":"main.js","original":{"line":409,"column":0}},{"generated":{"line":310,"column":0},"source":"main.js","original":{"line":410,"column":0}},{"generated":{"line":311,"column":0},"source":"main.js","original":{"line":411,"column":0}},{"generated":{"line":312,"column":0},"source":"main.js","original":{"line":412,"column":0}},{"generated":{"line":313,"column":0},"source":"main.js","original":{"line":413,"column":0}},{"generated":{"line":314,"column":0},"source":"main.js","original":{"line":414,"column":0}},{"generated":{"line":315,"column":0},"source":"main.js","original":{"line":415,"column":0}},{"generated":{"line":316,"column":0},"source":"main.js","original":{"line":416,"column":0}},{"generated":{"line":317,"column":0},"source":"main.js","original":{"line":417,"column":0}},{"generated":{"line":318,"column":0},"source":"main.js","original":{"line":418,"column":0}},{"generated":{"line":319,"column":0},"source":"main.js","original":{"line":419,"column":0}},{"generated":{"line":320,"column":0},"source":"main.js","original":{"line":421,"column":0}},{"generated":{"line":321,"column":0},"source":"main.js","original":{"line":422,"column":0}},{"generated":{"line":322,"column":0},"source":"main.js","original":{"line":423,"column":0}},{"generated":{"line":323,"column":0},"source":"main.js","original":{"line":424,"column":0}},{"generated":{"line":324,"column":0},"source":"main.js","original":{"line":425,"column":0}},{"generated":{"line":325,"column":0},"source":"main.js","original":{"line":426,"column":0}},{"generated":{"line":326,"column":0},"source":"main.js","original":{"line":427,"column":0}},{"generated":{"line":327,"column":0},"source":"main.js","original":{"line":432,"column":0}},{"generated":{"line":328,"column":0},"source":"main.js","original":{"line":433,"column":0}},{"generated":{"line":329,"column":0},"source":"main.js","original":{"line":434,"column":0}},{"generated":{"line":330,"column":0},"source":"main.js","original":{"line":435,"column":0}},{"generated":{"line":331,"column":0},"source":"main.js","original":{"line":436,"column":0}},{"generated":{"line":332,"column":0},"source":"main.js","original":{"line":437,"column":0}},{"generated":{"line":333,"column":0},"source":"main.js","original":{"line":438,"column":0}},{"generated":{"line":334,"column":0},"source":"main.js","original":{"line":440,"column":0}},{"generated":{"line":335,"column":0},"source":"main.js","original":{"line":441,"column":0}},{"generated":{"line":336,"column":0},"source":"main.js","original":{"line":443,"column":0}},{"generated":{"line":337,"column":0},"source":"main.js","original":{"line":444,"column":0}},{"generated":{"line":338,"column":0},"source":"main.js","original":{"line":445,"column":0}},{"generated":{"line":339,"column":0},"source":"main.js","original":{"line":446,"column":0}},{"generated":{"line":340,"column":0},"source":"main.js","original":{"line":447,"column":0}},{"generated":{"line":341,"column":0},"source":"main.js","original":{"line":448,"column":0}},{"generated":{"line":342,"column":0},"source":"main.js","original":{"line":449,"column":0}},{"generated":{"line":343,"column":0},"source":"main.js","original":{"line":450,"column":0}},{"generated":{"line":344,"column":0},"source":"main.js","original":{"line":451,"column":0}},{"generated":{"line":345,"column":0},"source":"main.js","original":{"line":452,"column":0}},{"generated":{"line":346,"column":0},"source":"main.js","original":{"line":453,"column":0}},{"generated":{"line":347,"column":0},"source":"main.js","original":{"line":454,"column":0}},{"generated":{"line":348,"column":0},"source":"main.js","original":{"line":463,"column":0}},{"generated":{"line":349,"column":0},"source":"main.js","original":{"line":464,"column":0}},{"generated":{"line":350,"column":0},"source":"main.js","original":{"line":465,"column":0}},{"generated":{"line":351,"column":0},"source":"main.js","original":{"line":466,"column":0}},{"generated":{"line":352,"column":0},"source":"main.js","original":{"line":467,"column":0}},{"generated":{"line":353,"column":0},"source":"main.js","original":{"line":468,"column":0}},{"generated":{"line":354,"column":0},"source":"main.js","original":{"line":469,"column":0}},{"generated":{"line":355,"column":0},"source":"main.js","original":{"line":470,"column":0}},{"generated":{"line":356,"column":0},"source":"main.js","original":{"line":473,"column":0}},{"generated":{"line":357,"column":0},"source":"main.js","original":{"line":474,"column":0}},{"generated":{"line":358,"column":0},"source":"main.js","original":{"line":475,"column":0}},{"generated":{"line":359,"column":0},"source":"main.js","original":{"line":476,"column":0}},{"generated":{"line":360,"column":0},"source":"main.js","original":{"line":477,"column":0}},{"generated":{"line":361,"column":0},"source":"main.js","original":{"line":478,"column":0}},{"generated":{"line":362,"column":0},"source":"main.js","original":{"line":479,"column":0}},{"generated":{"line":363,"column":0},"source":"main.js","original":{"line":481,"column":0}},{"generated":{"line":364,"column":0},"source":"main.js","original":{"line":482,"column":0}},{"generated":{"line":365,"column":0},"source":"main.js","original":{"line":484,"column":0}},{"generated":{"line":366,"column":0},"source":"main.js","original":{"line":485,"column":0}},{"generated":{"line":367,"column":0},"source":"main.js","original":{"line":489,"column":0}},{"generated":{"line":368,"column":0},"source":"main.js","original":{"line":490,"column":0}},{"generated":{"line":369,"column":0},"source":"main.js","original":{"line":491,"column":0}},{"generated":{"line":370,"column":0},"source":"main.js","original":{"line":492,"column":0}},{"generated":{"line":371,"column":0},"source":"main.js","original":{"line":494,"column":0}},{"generated":{"line":372,"column":0},"source":"main.js","original":{"line":495,"column":0}},{"generated":{"line":373,"column":0},"source":"main.js","original":{"line":496,"column":0}},{"generated":{"line":374,"column":0},"source":"main.js","original":{"line":497,"column":0}},{"generated":{"line":375,"column":0},"source":"main.js","original":{"line":498,"column":0}},{"generated":{"line":376,"column":0},"source":"main.js","original":{"line":499,"column":0}},{"generated":{"line":377,"column":0},"source":"main.js","original":{"line":500,"column":0}},{"generated":{"line":378,"column":0},"source":"main.js","original":{"line":501,"column":0}},{"generated":{"line":379,"column":0},"source":"main.js","original":{"line":502,"column":0}},{"generated":{"line":380,"column":0},"source":"main.js","original":{"line":503,"column":0}},{"generated":{"line":381,"column":0},"source":"main.js","original":{"line":504,"column":0}},{"generated":{"line":382,"column":0},"source":"main.js","original":{"line":505,"column":0}},{"generated":{"line":383,"column":0},"source":"main.js","original":{"line":506,"column":0}},{"generated":{"line":384,"column":0},"source":"main.js","original":{"line":507,"column":0}},{"generated":{"line":385,"column":0},"source":"main.js","original":{"line":508,"column":0}},{"generated":{"line":386,"column":0},"source":"main.js","original":{"line":509,"column":0}},{"generated":{"line":387,"column":0},"source":"main.js","original":{"line":510,"column":0}},{"generated":{"line":388,"column":0},"source":"main.js","original":{"line":511,"column":0}},{"generated":{"line":389,"column":0},"source":"main.js","original":{"line":520,"column":0}},{"generated":{"line":390,"column":0},"source":"main.js","original":{"line":521,"column":0}},{"generated":{"line":391,"column":0},"source":"main.js","original":{"line":522,"column":0}},{"generated":{"line":392,"column":0},"source":"main.js","original":{"line":523,"column":0}},{"generated":{"line":393,"column":0},"source":"main.js","original":{"line":524,"column":0}},{"generated":{"line":394,"column":0},"source":"main.js","original":{"line":525,"column":0}},{"generated":{"line":395,"column":0},"source":"main.js","original":{"line":527,"column":0}},{"generated":{"line":396,"column":0},"source":"main.js","original":{"line":528,"column":0}},{"generated":{"line":397,"column":0},"source":"main.js","original":{"line":529,"column":0}},{"generated":{"line":398,"column":0},"source":"main.js","original":{"line":530,"column":0}},{"generated":{"line":399,"column":0},"source":"main.js","original":{"line":531,"column":0}},{"generated":{"line":400,"column":0},"source":"main.js","original":{"line":532,"column":0}},{"generated":{"line":401,"column":0},"source":"main.js","original":{"line":533,"column":0}},{"generated":{"line":402,"column":0},"source":"main.js","original":{"line":534,"column":0}},{"generated":{"line":403,"column":0},"source":"main.js","original":{"line":536,"column":0}},{"generated":{"line":404,"column":0},"source":"main.js","original":{"line":537,"column":0}},{"generated":{"line":405,"column":0},"source":"main.js","original":{"line":538,"column":0}},{"generated":{"line":406,"column":0},"source":"main.js","original":{"line":539,"column":0}},{"generated":{"line":407,"column":0},"source":"main.js","original":{"line":540,"column":0}},{"generated":{"line":408,"column":0},"source":"main.js","original":{"line":542,"column":0}},{"generated":{"line":409,"column":0},"source":"main.js","original":{"line":543,"column":0}},{"generated":{"line":410,"column":0},"source":"main.js","original":{"line":544,"column":0}},{"generated":{"line":411,"column":0},"source":"main.js","original":{"line":545,"column":0}},{"generated":{"line":412,"column":0},"source":"main.js","original":{"line":546,"column":0}},{"generated":{"line":413,"column":0},"source":"main.js","original":{"line":547,"column":0}},{"generated":{"line":414,"column":0},"source":"main.js","original":{"line":549,"column":0}},{"generated":{"line":415,"column":0},"source":"main.js","original":{"line":550,"column":0}},{"generated":{"line":416,"column":0},"source":"main.js","original":{"line":551,"column":0}},{"generated":{"line":417,"column":0},"source":"main.js","original":{"line":552,"column":0}},{"generated":{"line":418,"column":0},"source":"main.js","original":{"line":553,"column":0}},{"generated":{"line":419,"column":0},"source":"main.js","original":{"line":557,"column":0}},{"generated":{"line":420,"column":0},"source":"main.js","original":{"line":558,"column":0}},{"generated":{"line":421,"column":0},"source":"main.js","original":{"line":559,"column":0}},{"generated":{"line":422,"column":0},"source":"main.js","original":{"line":562,"column":0}},{"generated":{"line":423,"column":0},"source":"main.js","original":{"line":563,"column":0}},{"generated":{"line":424,"column":0},"source":"main.js","original":{"line":564,"column":0}},{"generated":{"line":425,"column":0},"source":"main.js","original":{"line":565,"column":0}},{"generated":{"line":426,"column":0},"source":"main.js","original":{"line":569,"column":0}},{"generated":{"line":427,"column":0},"source":"main.js","original":{"line":570,"column":0}},{"generated":{"line":428,"column":0},"source":"main.js","original":{"line":571,"column":0}},{"generated":{"line":429,"column":0},"source":"main.js","original":{"line":573,"column":0}},{"generated":{"line":430,"column":0},"source":"main.js","original":{"line":575,"column":0}},{"generated":{"line":431,"column":0},"source":"main.js","original":{"line":576,"column":0}},{"generated":{"line":432,"column":0},"source":"main.js","original":{"line":577,"column":0}},{"generated":{"line":433,"column":0},"source":"main.js","original":{"line":579,"column":0}},{"generated":{"line":434,"column":0},"source":"main.js","original":{"line":584,"column":0}},{"generated":{"line":435,"column":0},"source":"main.js","original":{"line":585,"column":0}},{"generated":{"line":436,"column":0},"source":"main.js","original":{"line":586,"column":0}},{"generated":{"line":437,"column":0},"source":"main.js","original":{"line":588,"column":0}},{"generated":{"line":438,"column":0},"source":"main.js","original":{"line":589,"column":0}},{"generated":{"line":439,"column":0},"source":"main.js","original":{"line":590,"column":0}},{"generated":{"line":440,"column":0},"source":"main.js","original":{"line":591,"column":0}},{"generated":{"line":441,"column":0},"source":"main.js","original":{"line":592,"column":0}},{"generated":{"line":442,"column":0},"source":"main.js","original":{"line":593,"column":0}},{"generated":{"line":443,"column":0},"source":"main.js","original":{"line":596,"column":0}},{"generated":{"line":444,"column":0},"source":"main.js","original":{"line":597,"column":0}},{"generated":{"line":445,"column":0},"source":"main.js","original":{"line":598,"column":0}},{"generated":{"line":446,"column":0},"source":"main.js","original":{"line":599,"column":0}},{"generated":{"line":447,"column":0},"source":"main.js","original":{"line":600,"column":0}},{"generated":{"line":448,"column":0},"source":"main.js","original":{"line":602,"column":0}},{"generated":{"line":449,"column":0},"source":"main.js","original":{"line":603,"column":0}},{"generated":{"line":450,"column":0},"source":"main.js","original":{"line":604,"column":0}},{"generated":{"line":451,"column":0},"source":"main.js","original":{"line":605,"column":0}},{"generated":{"line":452,"column":0},"source":"main.js","original":{"line":606,"column":0}},{"generated":{"line":453,"column":0},"source":"main.js","original":{"line":608,"column":0}},{"generated":{"line":454,"column":0},"source":"main.js","original":{"line":609,"column":0}},{"generated":{"line":455,"column":0},"source":"main.js","original":{"line":610,"column":0}},{"generated":{"line":456,"column":0},"source":"main.js","original":{"line":611,"column":0}},{"generated":{"line":457,"column":0},"source":"main.js","original":{"line":612,"column":0}},{"generated":{"line":458,"column":0},"source":"main.js","original":{"line":618,"column":0}},{"generated":{"line":459,"column":0},"source":"main.js","original":{"line":619,"column":0}},{"generated":{"line":460,"column":0},"source":"main.js","original":{"line":620,"column":0}},{"generated":{"line":461,"column":0},"source":"main.js","original":{"line":623,"column":0}},{"generated":{"line":462,"column":0},"source":"main.js","original":{"line":624,"column":0}},{"generated":{"line":463,"column":0},"source":"main.js","original":{"line":625,"column":0}},{"generated":{"line":464,"column":0},"source":"main.js","original":{"line":626,"column":0}},{"generated":{"line":465,"column":0},"source":"main.js","original":{"line":629,"column":0}},{"generated":{"line":466,"column":0},"source":"main.js","original":{"line":630,"column":0}},{"generated":{"line":467,"column":0},"source":"main.js","original":{"line":631,"column":0}},{"generated":{"line":468,"column":0},"source":"main.js","original":{"line":632,"column":0}},{"generated":{"line":469,"column":0},"source":"main.js","original":{"line":635,"column":0}},{"generated":{"line":470,"column":0},"source":"main.js","original":{"line":636,"column":0}},{"generated":{"line":471,"column":0},"source":"main.js","original":{"line":638,"column":0}},{"generated":{"line":472,"column":0},"source":"main.js","original":{"line":639,"column":0}},{"generated":{"line":473,"column":0},"source":"main.js","original":{"line":640,"column":0}},{"generated":{"line":474,"column":0},"source":"main.js","original":{"line":641,"column":0}},{"generated":{"line":475,"column":0},"source":"main.js","original":{"line":643,"column":0}},{"generated":{"line":476,"column":0},"source":"main.js","original":{"line":644,"column":0}},{"generated":{"line":477,"column":0},"source":"main.js","original":{"line":645,"column":0}},{"generated":{"line":478,"column":0},"source":"main.js","original":{"line":646,"column":0}},{"generated":{"line":479,"column":0},"source":"main.js","original":{"line":648,"column":0}},{"generated":{"line":480,"column":0},"source":"main.js","original":{"line":649,"column":0}},{"generated":{"line":481,"column":0},"source":"main.js","original":{"line":650,"column":0}},{"generated":{"line":482,"column":0},"source":"main.js","original":{"line":651,"column":0}},{"generated":{"line":483,"column":0},"source":"main.js","original":{"line":653,"column":0}},{"generated":{"line":484,"column":0},"source":"main.js","original":{"line":654,"column":0}},{"generated":{"line":485,"column":0},"source":"main.js","original":{"line":659,"column":0}},{"generated":{"line":486,"column":0},"source":"main.js","original":{"line":660,"column":0}},{"generated":{"line":487,"column":0},"source":"main.js","original":{"line":662,"column":0}},{"generated":{"line":488,"column":0},"source":"main.js","original":{"line":663,"column":0}},{"generated":{"line":489,"column":0},"source":"main.js","original":{"line":664,"column":0}},{"generated":{"line":490,"column":0},"source":"main.js","original":{"line":665,"column":0}},{"generated":{"line":491,"column":0},"source":"main.js","original":{"line":667,"column":0}},{"generated":{"line":492,"column":0},"source":"main.js","original":{"line":669,"column":0}},{"generated":{"line":493,"column":0},"source":"main.js","original":{"line":670,"column":0}},{"generated":{"line":494,"column":0},"source":"main.js","original":{"line":671,"column":0}},{"generated":{"line":495,"column":0},"source":"main.js","original":{"line":672,"column":0}},{"generated":{"line":496,"column":0},"source":"main.js","original":{"line":674,"column":0}},{"generated":{"line":497,"column":0},"source":"main.js","original":{"line":675,"column":0}},{"generated":{"line":498,"column":0},"source":"main.js","original":{"line":676,"column":0}},{"generated":{"line":499,"column":0},"source":"main.js","original":{"line":677,"column":0}},{"generated":{"line":500,"column":0},"source":"main.js","original":{"line":678,"column":0}},{"generated":{"line":501,"column":0},"source":"main.js","original":{"line":680,"column":0}},{"generated":{"line":502,"column":0},"source":"main.js","original":{"line":682,"column":0}},{"generated":{"line":503,"column":0},"source":"main.js","original":{"line":683,"column":0}},{"generated":{"line":504,"column":0},"source":"main.js","original":{"line":685,"column":0}},{"generated":{"line":505,"column":0},"source":"main.js","original":{"line":686,"column":0}},{"generated":{"line":506,"column":0},"source":"main.js","original":{"line":687,"column":0}},{"generated":{"line":507,"column":0},"source":"main.js","original":{"line":688,"column":0}},{"generated":{"line":508,"column":0},"source":"main.js","original":{"line":689,"column":0}},{"generated":{"line":509,"column":0},"source":"main.js","original":{"line":690,"column":0}},{"generated":{"line":510,"column":0},"source":"main.js","original":{"line":691,"column":0}},{"generated":{"line":511,"column":0},"source":"main.js","original":{"line":692,"column":0}},{"generated":{"line":512,"column":0},"source":"main.js","original":{"line":693,"column":0}},{"generated":{"line":513,"column":0},"source":"main.js","original":{"line":694,"column":0}},{"generated":{"line":514,"column":0},"source":"main.js","original":{"line":696,"column":0}},{"generated":{"line":515,"column":0},"source":"main.js","original":{"line":697,"column":0}},{"generated":{"line":516,"column":0},"source":"main.js","original":{"line":698,"column":0}},{"generated":{"line":517,"column":0},"source":"main.js","original":{"line":699,"column":0}}],"sources":{"main.js":"//-------------------------------------------------------------------\r\n//  // Object.assign()\r\n// const target = { a: 1, b: 2 };\r\n// const source = { b: 4, c: 5 };\r\n// // target 객체에 source를 병합한다는 의미 <중복되는 데이터를 덮어씀>\r\n// const returnedTarget = Object.assign(target, source);\r\n\r\n// console.log(target);                // 출력값:  Object { a: 1, b: 4, c: 5 }\r\n// console.log(returnedTarget);        // 출력값:  Object { a: 1, b: 4, c: 5 }\r\n\r\n// Object.assign()\r\nconst userAge = {\r\n    // key : value\r\n    name: 'jinwoong',\r\n    age: 35\r\n}\r\nconst userEmail = {\r\n    name: 'jinwoong',\r\n    email: 'qwaszx3677@naer.com'\r\n}\r\n\r\nconst target = Object.assign(userAge, userEmail)\r\nconsole.log(target);\r\nconsole.log(userAge);\r\nconsole.log(target === userAge);\r\n\r\nconst a = {k: 123}\r\nconst b = {k: 123}\r\nconsole.log(a === b);\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// .filter()\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// // 총 4번의 리턴을 한다!! numbers의 요소가 4개이기 때문\r\n// // 원본 데이터에 변화를 주지않음!\r\n// const a = numbers.map(item => {\r\n//     return item < 3\r\n// })\r\n// //const a = numbers.map(item =>  item < 3) //람다식으로 고친 코드!\r\n// console.log(a);     //출력값 [true, true, false, false]\r\n\r\n// // filter메소드는 조건이 true인 경우에만 데이터를 반환해준다(필터링)\r\n// // 원본 데이터에 변화를 주지않음!\r\n// const b = numbers.filter(item => {\r\n//     return item < 3\r\n// })\r\n// //const b = numbers.filter(item => item < 3)  //람다식으로 고친 코드!\r\n// console.log(b);     //출력값 [1, 2]\r\n\r\n\r\n// // .find()  || .finfIndex()\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// // find() 함수는 배열(fruits)의 요소 갯수 만큼 반복됨\r\n// // find() 함수의 조건으로 true가 반환되면 반복을 멈추고\r\n// // true를 만족시키는 데이터를 함수의 반환값으로 넘겨준다\r\n// const a = fruits.find(itme => {\r\n//     return/^B/.test(itme)       //(조건) B로 시작하는가?\r\n// })\r\n// //const a = fruits.find(itme => /^B/.test(itme))        //위의 코드를 람다식으로 고침!\r\n// console.log(a);     //출력값 : Banana\r\n\r\n// // 함수의 조건으로 true가 반환되면 반복을 멈추고\r\n// // true를 만족시키는 데이터의 인덱스 번호(제로베이스드)를 반환값으로 넘겨준다!\r\n// const b = fruits.findIndex(itme => {\r\n//     return/^B/.test(itme)       //(조건) B로 시작하는가?\r\n// })\r\n// //const b = fruits.findIndex(itme => /^B/.test(itme))     //위의 코드를 람다식으로 고침\r\n// console.log(b);     //출력값 : 1\r\n\r\n\r\n// // .includes()\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// // numbers 배열에 3 이라는 데이터가 포함되어있냐? true flase로 반환해줘\r\n// const a = numbers.includes(3)\r\n// console.log(a);\r\n\r\n// // fruits0 배열에 Jin 이라는 데이터가 포함되어있냐? true flase로 반환해줘\r\n// const b = fruits.includes('Jin')\r\n// console.log(b);\r\n\r\n\r\n// // .push()    ||    .unshift()\r\n// // 원본 데이터가 수정된다 주의!!\r\n// // push는 배열의 가장뒷쪽에 데이터 삽입 || unshift는 배열의 가장앞쪽에 데이터 삽입\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// // numbers배열 가장 뒷쪽 부분에 5라는 데이터를 삽입한다\r\n// numbers.push(5)\r\n// console.log(numbers);\r\n\r\n// // numbers배열 가장 앞쪽 부분에 0이라는 데이터를 삽입한다\r\n// numbers.unshift(0)\r\n// console.log(numbers);\r\n\r\n\r\n// // .reverse()\r\n// // 원본 데이터가 수정된다 주의!!\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// // numbers배열의 순서를 뒤집어서 저장한다\r\n// numbers.reverse()\r\n\r\n// // fruits배열의 순서를 뒤집어서 저장한다\r\n// fruits.reverse()\r\n\r\n// console.log(numbers);   //출력값 : [4, 3, 2, 1]\r\n// console.log(fruits);    //출력값 : ['orange', 'Banana', 'Apple']\r\n\r\n\r\n// // .splice()\r\n// // 원본 데이터가 수정된다 주의!!\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// // splice(삭제를 시작할 인덱스 번호, 시작번호부터 몇개를 삭제할지)\r\n// numbers.splice(2, 1)    // 2번인덱스 부터 1개의 요소를 지워라는 뜻\r\n// console.log(numbers);   // 출력값 : [1, 2, 4]\r\n\r\n// // splice(삭제를 시작할 인덱스 번호, 시작번호부터 몇개를 삭제할지, 삭제를 시작할 인덱스 번호에 넣고싶은 데이터를 입력)\r\n// numbers.splice(2, 0, 999)    // 2번인덱스 부터 개의 요소를 지우고 999를 삽입해라\r\n// console.log(numbers);   // 출력값 : [1, 2, 999, 3, 4]\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana']\r\n\r\n// console.log(numbers);   //[1, 2, 3, 4] 출력\r\n// console.log(fruits);    //['Apple', 'Banana'] 출력\r\n// console.log(fruits[0]); //Apple 출력\r\n\r\n// .find\r\n// const array1 = [5, 12, 8, 130, 44];\r\n// const found = array1.find(element => element > 10);\r\n//array1 배열의 1번째 요소부터 검사를 해서 해당 조건의 결과값으로 true가 나오면 그 요소를 반환함\r\n// console.log(found); //출력값 12\r\n\r\n\r\n// .length  렝스는 배열속에 요소가 몇개 있는지 반환해주는 매소드이다\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana']\r\n// console.log(numbers.length);    //출력값 4\r\n// console.log(fruits.length);     //출력값 4\r\n// console.log([1,2].length);      //출력값 2\r\n// console.log([].length);         //출력값 0\r\n\r\n\r\n// // .concat()  콘켓을 사용하면 기존배열에다가 다른 배열의 데이터를 삽입할 수 있다\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana']\r\n\r\n// // 콘켓을 사용하면 원본 데이터값에 변화를 주지 않고 사용이 가능!\r\n// console.log(numbers.concat(fruits));    //출력값 [1, 2, 3, 4, 'Apple', 'Banana']\r\n// console.log(numbers);     //출력값 [1, 2, 3, 4]\r\n// console.log(fruits);      //출력값 ['Apple', 'Banana']\r\n\r\n\r\n\r\n// // .forEach() 사용하려는 배열의 요소갯수만큼 반복된다!\r\n// // fruits배열에 forEach()를 사용하면 3번 반복문이 동작한다\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// // 매소드의 인수로 사용되는 함수를 콜백함수라고 한다 아래의 경우 이름이 없으니까 \r\n// // 익명함수이면서 콜백함수이다\r\n// // forEach가 실행될때 element부분에는 데이터값이 넘어오고 \r\n// // index에는 제로베이스드의 인덱스 값이 넘어오고\r\n// // array부분에는 forEach()를 사용하고있는 배열데이터를 지칭함 아래의 경우 fruits를 의미\r\n// fruits.forEach(function (element, index, array) {\r\n//     console.log(element, index, array)\r\n// }) // 출력값\r\n// // Apple 0 (3) ['Apple', 'Banana', 'orange']\r\n// // Banana 1 (3) ['Apple', 'Banana', 'orange']\r\n// // orange 2 (3) ['Apple', 'Banana', 'orange']\r\n\r\n// // arry부분은 잘 사용하지 않기 때문에 아래처럼 사용을 많이 한다\r\n// fruits.forEach(function (element, index) {\r\n//     console.log(element, index)\r\n// })      //출력값\r\n// // Apple 0\r\n// // Banana 1\r\n// // orange 2\r\n\r\n\r\n// // .map()\r\n// //forEach()는 반환되는 값이 없는 반면에 map은 반환되는 값이 있다!!\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// const a = fruits.forEach(function (item, i){\r\n//     console.log(`${item}-${i}`);   \r\n// }) \r\n// console.log(a); // 출력값 undefined\r\n\r\n// const b = fruits.map(function (item, i){\r\n//      return `${item}-${i}`\r\n// })\r\n// console.log(b); // 출력값 ['Apple-0', 'Banana-1', 'orange-2']\r\n\r\n// // map()은 객체 리터럴 방식으로도 사용이 가능!\r\n// const c = fruits.map(function (item, i){\r\n//     return {\r\n//         id: i,\r\n//         name: item\r\n//     }\r\n// })\r\n// console.log(c); // return형식이 객체 데이터를 반환하기 때문에 객체가 담겨진 배열을 const c에 담는다!\r\n// // 0번 인덱스 값(객체) : {id: 0, name: 'Apple'}\r\n// // 1번 인덱스 값(객체) : {id: 1, name: 'Banana'}\r\n// // 2번 인덱스 값(객체) : {id: 2, name: 'orange'}\r\n\r\n\r\n// // forEach문과 map함수를 사용한 코드를 람다(화살표)함수로 바꿔보자!\r\n// const d = fruits.forEach((item, i) => {\r\n//     console.log(`${item}-${i}`);   \r\n// }) \r\n// console.log(d);\r\n\r\n// //map 함수에는 따로 로직이 구현되어있지않고 return만 있기 때문에 중괄호와 return을 생략해서\r\n// //작성할 수 있다 하지만 반환되는 내용이 객체이기 때문에 ( )소화로호 묶어둔 뒤 그안에 { } 중괄호\r\n// //를 사용해서 객체를 작성해줘야 한다\r\n// const e = fruits.map((item, i) =>({ id: i, name: item}))\r\n// console.log(e);\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// const pi = 3.141592\r\n// console.log(pi);\r\n\r\n// // 숫자 데이터에 toFixed(표시할 소숫점 자리)를 사용하면 입력된 소숫점 자리 까지만 보여준다\r\n// const str= pi.toFixed(2)\r\n// console.log(str);\r\n// // typeof를 사용하면 어떤 타입의 변수인지 알려준다\r\n// console.log(typeof str);\r\n\r\n// const integer = parseInt(str)\r\n// const float = parseFloat(str)\r\n// console.log(integer);\r\n// console.log(float);\r\n// console.log(typeof integer, typeof float);\r\n\r\n\r\n// // Math.abs() 함수는 주어진 숫자의 절대값을 반환합니다. \r\n// // x가 양수이거나 0이라면 x를 리턴하고, x가 음수라면 x의 반대값, 즉 양수를 반환합니다.\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// indexOf를 사용하면 인수값과 일치하는 인덱스번호를 알수있다 \r\n// 일치하는 값이 없을경우 -1을 반환함!\r\n// const r = 'Hello world!'.indexOf('w')\r\n// console.log(r);     //6 출력\r\n\r\n\r\n// // length를 사용하면 문자열의 글자가 몇개인지 알수있다\r\n// const str = '0123'\r\n// console.log(str.length);        //4 출력\r\n// console.log('0123'.length);     //4 출력\r\n\r\n// // indexOf 뒤에 (부정비교연산) !== 을 통하여 true||false 값으로 반환 받을 수 있다 \r\n// const str1 = 'Hello world!'\r\n// console.log(str1.indexOf('world!') !== -1);     //true 출력\r\n\r\n\r\n// // slice(추출을 시작할 인덱스 번호, 추출을 끝낼 인덱스 번호-1)를 사용하면\r\n// // 문자열의 일부를 추출해서 새로운 문자열을 반환한다\r\n// const str2 = 'Hello world!'\r\n// console.log(str2.slice(0,3));   //Hel 출력\r\n// console.log(str2.slice(6,11));  //world 출력\r\n\r\n\r\n// // replace('교체당할 문자열', '교체되어서 들어갈 문자열')을 사용하면\r\n// // 문자열의 내용을 교체할 수 있다\r\n// const str3 = 'Hello world!'\r\n// console.log(str3.replace('world', 'Jinwoong'));  //Hello Jinwoong! 출력\r\n// console.log(str3.replace('world!', ''));         //Hello 출력\r\n\r\n\r\n// // 정규표현식..?\r\n//  const str4 = 'qwaszx3677@naver.com'\r\n//  console.log(str4.match(/.+(?=@)/)[0]);  //qwaszx3677 출력\r\n\r\n\r\n// // trim() 을 사용하면 불필요한 공백을 삭제시켜준다\r\n//  const str5 = '    Hello world!   '\r\n//  console.log(str5);              //    Hello world!    출력(공백 포함)\r\n//  console.log(str5.trim());       //Hello world! 출력(불필요한 공백 사라짐)\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n //상속(확장)\r\n\r\n\r\n//  class Vehicle{\r\n//      constructor(name, wheel){\r\n//         this.name = name\r\n//         this.wheel = wheel\r\n//      }\r\n//  }\r\n// const myVehicle = new Vehicle('운송수단',2)\r\n// console.log(myVehicle)\r\n// console.log(myVehicle.name)\r\n// console.log(myVehicle.wheel)\r\n\r\n// extends가 확장(상속)의 의미를 갖게 만드는 키워드입니다.\r\n// class Bicycle extends Vehicle{\r\n//      constructor(name, wheel){\r\n//          super(name,wheel)\r\n//      }\r\n//  }\r\n//  const mYBicycle = new Bicycle('최진웅자전거',2)\r\n//  console.log(mYBicycle)\r\n\r\n\r\n// Bicycle 클래스의 경우 부모클래스가 가지고있는 로직을 가져와서 그대로 사용한 반면에\r\n// Car 클래스는 부모클래스가 가지고있는 로직에 새로운 로직을 추가해서 사용하고있다\r\n//  class Car extends Vehicle{\r\n//      constructor(name, wheel, license){\r\n//          super(name,wheel)\r\n//          this.license = license\r\n//      }\r\n//  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// ES6 Classes\r\n\r\n\r\n// const jin = {\r\n//     name: 'jinwoong',\r\n//     normal: function () {\r\n//         console.log(this.name)\r\n//     },\r\n//     arrow: () => {\r\n//         console.log(this.name)\r\n//     }\r\n// }\r\n\r\n// jin 객체 안에 normal이라는 이름의 함수를 축약해서 사용할 수 있다.\r\n// 어떤 이름이 나오고 그 뒤에 소괄호 ( ) 바로 그뒤에 중괄호 { }가 나오면 function 키워드를 사용해서 일반함수로\r\n// 만드는 개념과 동일하다!\r\n// const jin = {\r\n//     name: 'jinwoong',\r\n//     normal() {\r\n//         console.log(this.name)\r\n//     },\r\n//     arrow: () => {\r\n//         console.log(this.name)\r\n//     }\r\n// }\r\n\r\n\r\n// User라는 이름의 생성자 함수 정의\r\n// function User(first, last){\r\n//     this.firstName = first\r\n//     this.lastName = last\r\n// }\r\n// 생성자 함수에 getFullName이라는 이름의 프로토타입 함수를 생성\r\n// User.prototype.getFullName = function () {\r\n//     return `${this.firstName} ${this.lastName}`\r\n// }\r\n\r\n// 위의 생성자와 프로토 타입함수를 class로 정의하여 더욱 간결하게 작성해보자\r\n// class User{\r\n//     constructor(first, last){   //constructor또한 하나의 함수라고 생각하면 된다\r\n//         this.firstName = first\r\n//         this.lastName = last\r\n//     }\r\n//     getFullName(){  //프로토타입으로 선언하지않아도 class를 사용하면 함수를 생성할 수 있다!\r\n//         return `${this.firstName} ${this.lastName}`\r\n//     }\r\n// }\r\n\r\n\r\n// new를 사용해서 인스턴스(객체) 생성\r\n// const heropy = new User('Heropy', 'Park')\r\n// const jin = new User('Jinwoong', 'Choi')\r\n// const song = new User('Yousong', 'Kim')\r\n// heropy 부분은 객체 데이터를 출력\r\n// jin, song은 getFullName함수 호출후 결과값 출력\r\n// console.log(heropy)\r\n// console.log(jin.getFullName())\r\n// console.log(song.getFullName())\r\n\r\n\r\n\r\n\r\n\r\n\r\n// -------------------------------------------------------------------\r\n// this\r\n// 일반(normal) 함수는 호출 위치에 따라 this 정의!\r\n// 화살표(arrow) 함수는 자신이 선언된 함수 범위에서 this 정의!\r\n// const t = {\r\n//     name: 'Heropy',\r\n//     a :function(() => {\r\n//         console.log(this.name)\r\n//     });\r\n// }\r\n// heropy.normal()\r\n// heropy.arrow()\r\n\r\n// const amy = {\r\n//     name: 'Amy',\r\n//     normal: heropy.normal,\r\n//     arrow: heropy.arrow\r\n// }\r\n// amy.normal()\r\n// amy.arrow()\r\n\r\n\r\n\r\n\r\n// const timer = {\r\n//     name: 'he',\r\n//     timeout: function() {\r\n//         setTimeout(function(){\r\n//             console.log(this.name)\r\n//         },2000)\r\n//     }\r\n\r\n// }\r\n// timer.timeout()\r\n\r\n// const timer = {\r\n//     name: 'he',\r\n//     timeout: function() {\r\n//         setTimeout(() => {\r\n//             console.log(this.name)\r\n//         },2000)\r\n//     }\r\n// }\r\n// timer.timeout()\r\n// function User(name){\r\n//     this.name = name\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// const hero ={\r\n//     firstName : 'heropy',\r\n//     lastName : 'park',\r\n//     getFullName : function(){\r\n//         return `${this.firstName} ${this.lastName}`\r\n//     }\r\n// }\r\n\r\n\r\n// function User(first, last){\r\n//     this.firstName = first\r\n//     this.lastName = last\r\n// }\r\n// User.prototype.getFullName = function(){\r\n//     return `${this.firstName} ${this.lastName}`\r\n// }\r\n\r\n// const hero = new User('heropy','park')\r\n// const choi = new User('jinwoong','choi')\r\n\r\n// console.log(hero.getFullName())\r\n// console.log(choi)\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 콜백 (Callback)\r\n// 함수의 인수로 사용되는 함수!\r\n// setTimeout(함수, 시간)  ==> setTimeout이라는 함수안에 함수를 인수로 사용되니까 이게 콜백!\r\n \r\n// function timeout(){\r\n//     setTimeout(() =>{\r\n//         console.log('kkiki')\r\n//     }, 4000)\r\n// }\r\n// timeout()\r\n// console.log('Done');\r\n// 이렇게 작성되면~ Done이 먼저 출력된 뒤에 kkiki가 출력된다..ㅜ\r\n// timeout함수가 다 끝난다음에 Done을 출력하기 위해서는 아래와 같이 해야한다(콜백)\r\n// function timeout(kiki){\r\n//     setTimeout(() =>{\r\n//         console.log('kkiki')\r\n//         kiki()\r\n//     }, 4000)\r\n// }\r\n// timeout(() => { \r\n//     console.log('Done');\r\n// })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 타이머 함수\r\n// setTimeout(함수, 시간) : 일정 시간 후 함수 실행\r\n// setInterval(함수, 시간) : 시간 간격마다 함수 실행\r\n// clearTimeout() : 설정된 Timeout 함수를 종료\r\n// clearInterval() : 설정된 Interval 함수를 종료\r\n\r\n// 익명 함수를 만들어서 넣어도 됨~\r\n// setTimeout(function() {\r\n//     console.log('ㅎㅇ');\r\n// }, 3000);\r\n// 위의 코드를 람다를 사용해서 바꿔봄 내용은 동일\r\n// setTimeout(() => {\r\n//     console.log('ㅎㅇ')\r\n// }, 3000);\r\n\r\n// setTimeout을 실행하게되면 특정한 timer값이 반환이 되는데\r\n// 그 값을 timer라는 변수에 한번 받아봄\r\n// const timer = setTimeout(() => {\r\n//     console.log('ㅎㅇ')\r\n// }, 3000);\r\n\r\n// 화면에 Hello world!를 클릭하면 clearTimeout을 사용해서 timer가 종료되도록 만들어봄\r\n// Hello world! 클릭하면 timer가 종료되어서 함수 실행이 안됨! ㅋㅋㅋ\r\n// const h1El = document.querySelector('h1');\r\n// h1El.addEventListener('click', function() {\r\n//     clearTimeout(timer);\r\n// })\r\n\r\n// 위의 코드를 람다로 바꿔봤다\r\n// const h1El = document.querySelector('h1');\r\n// h1El.addEventListener('click', () => {\r\n//     clearTimeout(timer);\r\n// })\r\n\r\n\r\n\r\n// const timer = setInterval(() => {\r\n//     console.log('ㅎㅇ')\r\n// }, 3000);\r\n\r\n\r\n// const h1El = document.querySelector('h1');\r\n// h1El.addEventListener('click', () => {\r\n//     clearInterval(timer);\r\n// })\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 호이스팅\r\n// 함수 선언부가 유효범위 최상단으로 끌어올려지는 현상\r\n\r\n// const a = 7;\r\n\r\n// const double = function () {\r\n//     console.log(a * 4);\r\n// }\r\n\r\n// double()\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 즉시실행함수\r\n// IIFE, Immediately-Invoked Function Expreesion\r\n\r\n// const a = 20;\r\n// function double(){\r\n//     console.log(a * 2);\r\n// }\r\n// double();\r\n//  위와 같은 방법은 함수를 만들자 마자 바로 써야하는데 함수를 만들어 놓고 호출하는 번거로움이 있다\r\n\r\n\r\n// 익명함수를 만들자\r\n// function () {\r\n//     console.log(a * 2);\r\n// }\r\n// 익명함수를 만들었더니 호출을 하지못해서 쓸수가 없다..\r\n\r\n// 위와같은 상황을 해결하기 위해서는 익명 함수를 ( ) 괄호로 묶어주고 그 뒤에 ( ) 괄호를\r\n// 한번더 사용한다!\r\n// (function () {\r\n//     console.log(a * 2);\r\n// })()\r\n\r\n// 위의 코드와 똑같은 내용이다! 다만 위의 경우 익명함수를 만들고 ( )를 사용해서\r\n// 감싸 준 다음 ( )를 한번더 작성했다면 아래의 코드는 익명함수 내부에 ( )를 사용했다!\r\n// (function () {\r\n//     console.log(a * 2);\r\n// }())\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 화살표 함수\r\n// () => {}       vs     function ()  {}\r\n\r\n\r\n// const double = function (x) {\r\n//     return x*2;\r\n// }\r\n// console.log('double : ', double(7));\r\n\r\n\r\n// const doubleArrow = (x) => {\r\n//     return x*2;\r\n// }\r\n// console.log('doubleArrow : ', doubleArrow(7));\r\n\r\n\r\n// const doubleArrow = (x) => x*2\r\n// console.log('doubleArrow : ', doubleArrow(7));\r\n\r\n// const doubleArrow = (x) => ({\r\n//     name : 'woong'\r\n//  })\r\n//  console.log('doubleArrow : ', doubleArrow(7).name);\r\n\r\n// const sum = function (x, y){\r\n//     return x+y;\r\n// }\r\n// console.log(sum(1 ,10));\r\n\r\n// const sumArrow = (x, y) => {\r\n//     return x+y;\r\n// }\r\n// console.log(sumArrow(1 ,10));\r\n\r\n// const sumArrow = (x, y) => x+y\r\n// console.log(sumArrow(1 ,10));\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 함수 복습\r\n\r\n// \"함수선언방식\"\r\n// function sum(x, y){\r\n//     return x+y;\r\n// }\r\n\r\n// console.log(sum(1,30));\r\n\r\n// 함수의 이름을 작성하지않는 익명 함수를 만들어서 변수에 담에서 사용하는 \"함수표현방식\"\r\n// const sum = function (x, y){\r\n//     return x+y;\r\n// }\r\n\r\n// arguments는 함수를 실행할때 전달받은 인수의 값들을 제로베이스드 배열형태로 알아서 저장해준다\r\n// 따라서 매개변수를 입력하지 않고도 함수사용이 가능하다!\r\n//  function sum (){\r\n//     return arguments[0] + arguments[1];\r\n// }\r\n\r\n// sum(1 ,10);\r\n\r\n// ------------------------------------------------------------\r\n// const ulEl = document.querySelector('ul');\r\n\r\n// for(let i = 0 ; i < 10 ; i++){\r\n//     const li = document.createElement('li');\r\n//     li.textContent=`List-${i+1}`;\r\n//     if(i % 2){\r\n//         li.addEventListener('click',function(){\r\n//             console.log(li.textContent);\r\n//         })\r\n//     }\r\n//     ulEl.appendChild(li);\r\n// }\r\n\r\n// if(1){\r\n//     console.log('ㅎㅇㅎㅇ');\r\n//     console.log(ulEl);\r\n// }"},"lineCount":null}},"error":null,"hash":"89bf4526f3d5394b6e8d4cf6c9424099","cacheData":{"env":{}}}