{"version":3,"sources":["main.js","node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["numbers","fruits","splice","console","log","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","type","handled","assets","forEach","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","Array","isArray","length","concat","Function","deps","cached","cache","some","cb"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA,IAAMA,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAhB;AACA,IAAMC,MAAM,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,CAAf,EAEA;AACA;AACA;AAEA;;AACAD,OAAO,CAACE,MAAR,CAAe,CAAf,EAAkB,CAAlB,EAAqB,GAArB,GAA6B;;AAC7BC,OAAO,CAACC,GAAR,CAAYJ,OAAZ,GAAwB;AAKxB;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAMA;AACC;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;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","file":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["//-------------------------------------------------------------------\r\n// .filter()\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// // 총 4번의 리턴을 한다!! numbers의 요소가 4개이기 때문\r\n// // 원본 데이터에 변화를 주지않음!\r\n// const a = numbers.map(item => {\r\n//     return item < 3\r\n// })\r\n// //const a = numbers.map(item =>  item < 3) //람다식으로 고친 코드!\r\n// console.log(a);     //출력값 [true, true, false, false]\r\n\r\n// // filter메소드는 조건이 true인 경우에만 데이터를 반환해준다(필터링)\r\n// // 원본 데이터에 변화를 주지않음!\r\n// const b = numbers.filter(item => {\r\n//     return item < 3\r\n// })\r\n// //const b = numbers.filter(item => item < 3)  //람다식으로 고친 코드!\r\n// console.log(b);     //출력값 [1, 2]\r\n\r\n\r\n// // .find()  || .finfIndex()\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// // find() 함수는 배열(fruits)의 요소 갯수 만큼 반복됨\r\n// // find() 함수의 조건으로 true가 반환되면 반복을 멈추고\r\n// // true를 만족시키는 데이터를 함수의 반환값으로 넘겨준다\r\n// const a = fruits.find(itme => {\r\n//     return/^B/.test(itme)       //(조건) B로 시작하는가?\r\n// })\r\n// //const a = fruits.find(itme => /^B/.test(itme))        //위의 코드를 람다식으로 고침!\r\n// console.log(a);     //출력값 : Banana\r\n\r\n// // 함수의 조건으로 true가 반환되면 반복을 멈추고\r\n// // true를 만족시키는 데이터의 인덱스 번호(제로베이스드)를 반환값으로 넘겨준다!\r\n// const b = fruits.findIndex(itme => {\r\n//     return/^B/.test(itme)       //(조건) B로 시작하는가?\r\n// })\r\n// //const b = fruits.findIndex(itme => /^B/.test(itme))     //위의 코드를 람다식으로 고침\r\n// console.log(b);     //출력값 : 1\r\n\r\n\r\n// // .includes()\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// // numbers 배열에 3 이라는 데이터가 포함되어있냐? true flase로 반환해줘\r\n// const a = numbers.includes(3)\r\n// console.log(a);\r\n\r\n// // fruits0 배열에 Jin 이라는 데이터가 포함되어있냐? true flase로 반환해줘\r\n// const b = fruits.includes('Jin')\r\n// console.log(b);\r\n\r\n\r\n// // .push()    ||    .unshift()\r\n// // 원본 데이터가 수정된다 주의!!\r\n// // push는 배열의 가장뒷쪽에 데이터 삽입 || unshift는 배열의 가장앞쪽에 데이터 삽입\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// // numbers배열 가장 뒷쪽 부분에 5라는 데이터를 삽입한다\r\n// numbers.push(5)\r\n// console.log(numbers);\r\n\r\n// // numbers배열 가장 앞쪽 부분에 0이라는 데이터를 삽입한다\r\n// numbers.unshift(0)\r\n// console.log(numbers);\r\n\r\n\r\n// // .reverse()\r\n// // 원본 데이터가 수정된다 주의!!\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// // numbers배열의 순서를 뒤집어서 저장한다\r\n// numbers.reverse()\r\n\r\n// // fruits배열의 순서를 뒤집어서 저장한다\r\n// fruits.reverse()\r\n\r\n// console.log(numbers);   //출력값 : [4, 3, 2, 1]\r\n// console.log(fruits);    //출력값 : ['orange', 'Banana', 'Apple']\r\n\r\n\r\n// .splice()\r\n// 원본 데이터가 수정된다 주의!!\r\nconst numbers = [1, 2, 3, 4]\r\nconst fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// splice(삭제를 시작할 인덱스 번호, 시작번호부터 몇개를 삭제할지)\r\n// numbers.splice(2, 1)    // 2번인덱스 부터 1개의 요소를 지워라는 뜻\r\n// console.log(numbers);   // 출력값 : [1, 2, 4]\r\n\r\n// splice(삭제를 시작할 인덱스 번호, 시작번호부터 몇개를 삭제할지, 삭제를 시작할 인덱스 번호에 넣고싶은 데이터를 입력)\r\nnumbers.splice(2, 0, 999)    // 2번인덱스 부터 개의 요소를 지우고 999를 삽입해라\r\nconsole.log(numbers);   // 출력값 : [1, 2, 4]\r\n\r\n\r\n\r\n\r\n//\r\n//\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n\r\n// console.log(numbers);\r\n// console.log(fruits);\r\n\r\n//-------------------------------------------------------------------\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana']\r\n\r\n// console.log(numbers);   //[1, 2, 3, 4] 출력\r\n// console.log(fruits);    //['Apple', 'Banana'] 출력\r\n// console.log(fruits[0]); //Apple 출력\r\n\r\n// .find\r\n// const array1 = [5, 12, 8, 130, 44];\r\n// const found = array1.find(element => element > 10);\r\n//array1 배열의 1번째 요소부터 검사를 해서 해당 조건의 결과값으로 true가 나오면 그 요소를 반환함\r\n// console.log(found); //출력값 12\r\n\r\n\r\n// .length  렝스는 배열속에 요소가 몇개 있는지 반환해주는 매소드이다\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana']\r\n// console.log(numbers.length);    //출력값 4\r\n// console.log(fruits.length);     //출력값 4\r\n// console.log([1,2].length);      //출력값 2\r\n// console.log([].length);         //출력값 0\r\n\r\n\r\n// // .concat()  콘켓을 사용하면 기존배열에다가 다른 배열의 데이터를 삽입할 수 있다\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana']\r\n\r\n// // 콘켓을 사용하면 원본 데이터값에 변화를 주지 않고 사용이 가능!\r\n// console.log(numbers.concat(fruits));    //출력값 [1, 2, 3, 4, 'Apple', 'Banana']\r\n// console.log(numbers);     //출력값 [1, 2, 3, 4]\r\n// console.log(fruits);      //출력값 ['Apple', 'Banana']\r\n\r\n\r\n\r\n// // .forEach() 사용하려는 배열의 요소갯수만큼 반복된다!\r\n// // fruits배열에 forEach()를 사용하면 3번 반복문이 동작한다\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// // 매소드의 인수로 사용되는 함수를 콜백함수라고 한다 아래의 경우 이름이 없으니까 \r\n// // 익명함수이면서 콜백함수이다\r\n// // forEach가 실행될때 element부분에는 데이터값이 넘어오고 \r\n// // index에는 제로베이스드의 인덱스 값이 넘어오고\r\n// // array부분에는 forEach()를 사용하고있는 배열데이터를 지칭함 아래의 경우 fruits를 의미\r\n// fruits.forEach(function (element, index, array) {\r\n//     console.log(element, index, array)\r\n// }) // 출력값\r\n// // Apple 0 (3) ['Apple', 'Banana', 'orange']\r\n// // Banana 1 (3) ['Apple', 'Banana', 'orange']\r\n// // orange 2 (3) ['Apple', 'Banana', 'orange']\r\n\r\n// // arry부분은 잘 사용하지 않기 때문에 아래처럼 사용을 많이 한다\r\n// fruits.forEach(function (element, index) {\r\n//     console.log(element, index)\r\n// })      //출력값\r\n// // Apple 0\r\n// // Banana 1\r\n// // orange 2\r\n\r\n\r\n// // .map()\r\n// //forEach()는 반환되는 값이 없는 반면에 map은 반환되는 값이 있다!!\r\n// const numbers = [1, 2, 3, 4]\r\n// const fruits = ['Apple', 'Banana', 'orange']\r\n\r\n// const a = fruits.forEach(function (item, i){\r\n//     console.log(`${item}-${i}`);   \r\n// }) \r\n// console.log(a); // 출력값 undefined\r\n\r\n// const b = fruits.map(function (item, i){\r\n//      return `${item}-${i}`\r\n// })\r\n// console.log(b); // 출력값 ['Apple-0', 'Banana-1', 'orange-2']\r\n\r\n// // map()은 객체 리터럴 방식으로도 사용이 가능!\r\n// const c = fruits.map(function (item, i){\r\n//     return {\r\n//         id: i,\r\n//         name: item\r\n//     }\r\n// })\r\n// console.log(c); // return형식이 객체 데이터를 반환하기 때문에 객체가 담겨진 배열을 const c에 담는다!\r\n// // 0번 인덱스 값(객체) : {id: 0, name: 'Apple'}\r\n// // 1번 인덱스 값(객체) : {id: 1, name: 'Banana'}\r\n// // 2번 인덱스 값(객체) : {id: 2, name: 'orange'}\r\n\r\n\r\n// // forEach문과 map함수를 사용한 코드를 람다(화살표)함수로 바꿔보자!\r\n// const d = fruits.forEach((item, i) => {\r\n//     console.log(`${item}-${i}`);   \r\n// }) \r\n// console.log(d);\r\n\r\n// //map 함수에는 따로 로직이 구현되어있지않고 return만 있기 때문에 중괄호와 return을 생략해서\r\n// //작성할 수 있다 하지만 반환되는 내용이 객체이기 때문에 ( )소화로호 묶어둔 뒤 그안에 { } 중괄호\r\n// //를 사용해서 객체를 작성해줘야 한다\r\n// const e = fruits.map((item, i) =>({ id: i, name: item}))\r\n// console.log(e);\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// const pi = 3.141592\r\n// console.log(pi);\r\n\r\n// // 숫자 데이터에 toFixed(표시할 소숫점 자리)를 사용하면 입력된 소숫점 자리 까지만 보여준다\r\n// const str= pi.toFixed(2)\r\n// console.log(str);\r\n// // typeof를 사용하면 어떤 타입의 변수인지 알려준다\r\n// console.log(typeof str);\r\n\r\n// const integer = parseInt(str)\r\n// const float = parseFloat(str)\r\n// console.log(integer);\r\n// console.log(float);\r\n// console.log(typeof integer, typeof float);\r\n\r\n\r\n// // Math.abs() 함수는 주어진 숫자의 절대값을 반환합니다. \r\n// // x가 양수이거나 0이라면 x를 리턴하고, x가 음수라면 x의 반대값, 즉 양수를 반환합니다.\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// indexOf를 사용하면 인수값과 일치하는 인덱스번호를 알수있다 \r\n// 일치하는 값이 없을경우 -1을 반환함!\r\n// const r = 'Hello world!'.indexOf('w')\r\n// console.log(r);     //6 출력\r\n\r\n\r\n// // length를 사용하면 문자열의 글자가 몇개인지 알수있다\r\n// const str = '0123'\r\n// console.log(str.length);        //4 출력\r\n// console.log('0123'.length);     //4 출력\r\n\r\n// // indexOf 뒤에 (부정비교연산) !== 을 통하여 true||false 값으로 반환 받을 수 있다 \r\n// const str1 = 'Hello world!'\r\n// console.log(str1.indexOf('world!') !== -1);     //true 출력\r\n\r\n\r\n// // slice(추출을 시작할 인덱스 번호, 추출을 끝낼 인덱스 번호-1)를 사용하면\r\n// // 문자열의 일부를 추출해서 새로운 문자열을 반환한다\r\n// const str2 = 'Hello world!'\r\n// console.log(str2.slice(0,3));   //Hel 출력\r\n// console.log(str2.slice(6,11));  //world 출력\r\n\r\n\r\n// // replace('교체당할 문자열', '교체되어서 들어갈 문자열')을 사용하면\r\n// // 문자열의 내용을 교체할 수 있다\r\n// const str3 = 'Hello world!'\r\n// console.log(str3.replace('world', 'Jinwoong'));  //Hello Jinwoong! 출력\r\n// console.log(str3.replace('world!', ''));         //Hello 출력\r\n\r\n\r\n// // 정규표현식..?\r\n//  const str4 = 'qwaszx3677@naver.com'\r\n//  console.log(str4.match(/.+(?=@)/)[0]);  //qwaszx3677 출력\r\n\r\n\r\n// // trim() 을 사용하면 불필요한 공백을 삭제시켜준다\r\n//  const str5 = '    Hello world!   '\r\n//  console.log(str5);              //    Hello world!    출력(공백 포함)\r\n//  console.log(str5.trim());       //Hello world! 출력(불필요한 공백 사라짐)\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n //상속(확장)\r\n\r\n\r\n//  class Vehicle{\r\n//      constructor(name, wheel){\r\n//         this.name = name\r\n//         this.wheel = wheel\r\n//      }\r\n//  }\r\n// const myVehicle = new Vehicle('운송수단',2)\r\n// console.log(myVehicle)\r\n// console.log(myVehicle.name)\r\n// console.log(myVehicle.wheel)\r\n\r\n// extends가 확장(상속)의 의미를 갖게 만드는 키워드입니다.\r\n// class Bicycle extends Vehicle{\r\n//      constructor(name, wheel){\r\n//          super(name,wheel)\r\n//      }\r\n//  }\r\n//  const mYBicycle = new Bicycle('최진웅자전거',2)\r\n//  console.log(mYBicycle)\r\n\r\n\r\n// Bicycle 클래스의 경우 부모클래스가 가지고있는 로직을 가져와서 그대로 사용한 반면에\r\n// Car 클래스는 부모클래스가 가지고있는 로직에 새로운 로직을 추가해서 사용하고있다\r\n//  class Car extends Vehicle{\r\n//      constructor(name, wheel, license){\r\n//          super(name,wheel)\r\n//          this.license = license\r\n//      }\r\n//  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// ES6 Classes\r\n\r\n\r\n// const jin = {\r\n//     name: 'jinwoong',\r\n//     normal: function () {\r\n//         console.log(this.name)\r\n//     },\r\n//     arrow: () => {\r\n//         console.log(this.name)\r\n//     }\r\n// }\r\n\r\n// jin 객체 안에 normal이라는 이름의 함수를 축약해서 사용할 수 있다.\r\n// 어떤 이름이 나오고 그 뒤에 소괄호 ( ) 바로 그뒤에 중괄호 { }가 나오면 function 키워드를 사용해서 일반함수로\r\n// 만드는 개념과 동일하다!\r\n// const jin = {\r\n//     name: 'jinwoong',\r\n//     normal() {\r\n//         console.log(this.name)\r\n//     },\r\n//     arrow: () => {\r\n//         console.log(this.name)\r\n//     }\r\n// }\r\n\r\n\r\n// User라는 이름의 생성자 함수 정의\r\n// function User(first, last){\r\n//     this.firstName = first\r\n//     this.lastName = last\r\n// }\r\n// 생성자 함수에 getFullName이라는 이름의 프로토타입 함수를 생성\r\n// User.prototype.getFullName = function () {\r\n//     return `${this.firstName} ${this.lastName}`\r\n// }\r\n\r\n// 위의 생성자와 프로토 타입함수를 class로 정의하여 더욱 간결하게 작성해보자\r\n// class User{\r\n//     constructor(first, last){   //constructor또한 하나의 함수라고 생각하면 된다\r\n//         this.firstName = first\r\n//         this.lastName = last\r\n//     }\r\n//     getFullName(){  //프로토타입으로 선언하지않아도 class를 사용하면 함수를 생성할 수 있다!\r\n//         return `${this.firstName} ${this.lastName}`\r\n//     }\r\n// }\r\n\r\n\r\n// new를 사용해서 인스턴스(객체) 생성\r\n// const heropy = new User('Heropy', 'Park')\r\n// const jin = new User('Jinwoong', 'Choi')\r\n// const song = new User('Yousong', 'Kim')\r\n// heropy 부분은 객체 데이터를 출력\r\n// jin, song은 getFullName함수 호출후 결과값 출력\r\n// console.log(heropy)\r\n// console.log(jin.getFullName())\r\n// console.log(song.getFullName())\r\n\r\n\r\n\r\n\r\n\r\n\r\n// -------------------------------------------------------------------\r\n// this\r\n// 일반(normal) 함수는 호출 위치에 따라 this 정의!\r\n// 화살표(arrow) 함수는 자신이 선언된 함수 범위에서 this 정의!\r\n// const t = {\r\n//     name: 'Heropy',\r\n//     a :function(() => {\r\n//         console.log(this.name)\r\n//     });\r\n// }\r\n// heropy.normal()\r\n// heropy.arrow()\r\n\r\n// const amy = {\r\n//     name: 'Amy',\r\n//     normal: heropy.normal,\r\n//     arrow: heropy.arrow\r\n// }\r\n// amy.normal()\r\n// amy.arrow()\r\n\r\n\r\n\r\n\r\n// const timer = {\r\n//     name: 'he',\r\n//     timeout: function() {\r\n//         setTimeout(function(){\r\n//             console.log(this.name)\r\n//         },2000)\r\n//     }\r\n\r\n// }\r\n// timer.timeout()\r\n\r\n// const timer = {\r\n//     name: 'he',\r\n//     timeout: function() {\r\n//         setTimeout(() => {\r\n//             console.log(this.name)\r\n//         },2000)\r\n//     }\r\n// }\r\n// timer.timeout()\r\n// function User(name){\r\n//     this.name = name\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// const hero ={\r\n//     firstName : 'heropy',\r\n//     lastName : 'park',\r\n//     getFullName : function(){\r\n//         return `${this.firstName} ${this.lastName}`\r\n//     }\r\n// }\r\n\r\n\r\n// function User(first, last){\r\n//     this.firstName = first\r\n//     this.lastName = last\r\n// }\r\n// User.prototype.getFullName = function(){\r\n//     return `${this.firstName} ${this.lastName}`\r\n// }\r\n\r\n// const hero = new User('heropy','park')\r\n// const choi = new User('jinwoong','choi')\r\n\r\n// console.log(hero.getFullName())\r\n// console.log(choi)\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 콜백 (Callback)\r\n// 함수의 인수로 사용되는 함수!\r\n// setTimeout(함수, 시간)  ==> setTimeout이라는 함수안에 함수를 인수로 사용되니까 이게 콜백!\r\n \r\n// function timeout(){\r\n//     setTimeout(() =>{\r\n//         console.log('kkiki')\r\n//     }, 4000)\r\n// }\r\n// timeout()\r\n// console.log('Done');\r\n// 이렇게 작성되면~ Done이 먼저 출력된 뒤에 kkiki가 출력된다..ㅜ\r\n// timeout함수가 다 끝난다음에 Done을 출력하기 위해서는 아래와 같이 해야한다(콜백)\r\n// function timeout(kiki){\r\n//     setTimeout(() =>{\r\n//         console.log('kkiki')\r\n//         kiki()\r\n//     }, 4000)\r\n// }\r\n// timeout(() => { \r\n//     console.log('Done');\r\n// })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 타이머 함수\r\n// setTimeout(함수, 시간) : 일정 시간 후 함수 실행\r\n// setInterval(함수, 시간) : 시간 간격마다 함수 실행\r\n// clearTimeout() : 설정된 Timeout 함수를 종료\r\n// clearInterval() : 설정된 Interval 함수를 종료\r\n\r\n// 익명 함수를 만들어서 넣어도 됨~\r\n// setTimeout(function() {\r\n//     console.log('ㅎㅇ');\r\n// }, 3000);\r\n// 위의 코드를 람다를 사용해서 바꿔봄 내용은 동일\r\n// setTimeout(() => {\r\n//     console.log('ㅎㅇ')\r\n// }, 3000);\r\n\r\n// setTimeout을 실행하게되면 특정한 timer값이 반환이 되는데\r\n// 그 값을 timer라는 변수에 한번 받아봄\r\n// const timer = setTimeout(() => {\r\n//     console.log('ㅎㅇ')\r\n// }, 3000);\r\n\r\n// 화면에 Hello world!를 클릭하면 clearTimeout을 사용해서 timer가 종료되도록 만들어봄\r\n// Hello world! 클릭하면 timer가 종료되어서 함수 실행이 안됨! ㅋㅋㅋ\r\n// const h1El = document.querySelector('h1');\r\n// h1El.addEventListener('click', function() {\r\n//     clearTimeout(timer);\r\n// })\r\n\r\n// 위의 코드를 람다로 바꿔봤다\r\n// const h1El = document.querySelector('h1');\r\n// h1El.addEventListener('click', () => {\r\n//     clearTimeout(timer);\r\n// })\r\n\r\n\r\n\r\n// const timer = setInterval(() => {\r\n//     console.log('ㅎㅇ')\r\n// }, 3000);\r\n\r\n\r\n// const h1El = document.querySelector('h1');\r\n// h1El.addEventListener('click', () => {\r\n//     clearInterval(timer);\r\n// })\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 호이스팅\r\n// 함수 선언부가 유효범위 최상단으로 끌어올려지는 현상\r\n\r\n// const a = 7;\r\n\r\n// const double = function () {\r\n//     console.log(a * 4);\r\n// }\r\n\r\n// double()\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 즉시실행함수\r\n// IIFE, Immediately-Invoked Function Expreesion\r\n\r\n// const a = 20;\r\n// function double(){\r\n//     console.log(a * 2);\r\n// }\r\n// double();\r\n//  위와 같은 방법은 함수를 만들자 마자 바로 써야하는데 함수를 만들어 놓고 호출하는 번거로움이 있다\r\n\r\n\r\n// 익명함수를 만들자\r\n// function () {\r\n//     console.log(a * 2);\r\n// }\r\n// 익명함수를 만들었더니 호출을 하지못해서 쓸수가 없다..\r\n\r\n// 위와같은 상황을 해결하기 위해서는 익명 함수를 ( ) 괄호로 묶어주고 그 뒤에 ( ) 괄호를\r\n// 한번더 사용한다!\r\n// (function () {\r\n//     console.log(a * 2);\r\n// })()\r\n\r\n// 위의 코드와 똑같은 내용이다! 다만 위의 경우 익명함수를 만들고 ( )를 사용해서\r\n// 감싸 준 다음 ( )를 한번더 작성했다면 아래의 코드는 익명함수 내부에 ( )를 사용했다!\r\n// (function () {\r\n//     console.log(a * 2);\r\n// }())\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 화살표 함수\r\n// () => {}       vs     function ()  {}\r\n\r\n\r\n// const double = function (x) {\r\n//     return x*2;\r\n// }\r\n// console.log('double : ', double(7));\r\n\r\n\r\n// const doubleArrow = (x) => {\r\n//     return x*2;\r\n// }\r\n// console.log('doubleArrow : ', doubleArrow(7));\r\n\r\n\r\n// const doubleArrow = (x) => x*2\r\n// console.log('doubleArrow : ', doubleArrow(7));\r\n\r\n// const doubleArrow = (x) => ({\r\n//     name : 'woong'\r\n//  })\r\n//  console.log('doubleArrow : ', doubleArrow(7).name);\r\n\r\n// const sum = function (x, y){\r\n//     return x+y;\r\n// }\r\n// console.log(sum(1 ,10));\r\n\r\n// const sumArrow = (x, y) => {\r\n//     return x+y;\r\n// }\r\n// console.log(sumArrow(1 ,10));\r\n\r\n// const sumArrow = (x, y) => x+y\r\n// console.log(sumArrow(1 ,10));\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 함수 복습\r\n\r\n// \"함수선언방식\"\r\n// function sum(x, y){\r\n//     return x+y;\r\n// }\r\n\r\n// console.log(sum(1,30));\r\n\r\n// 함수의 이름을 작성하지않는 익명 함수를 만들어서 변수에 담에서 사용하는 \"함수표현방식\"\r\n// const sum = function (x, y){\r\n//     return x+y;\r\n// }\r\n\r\n// arguments는 함수를 실행할때 전달받은 인수의 값들을 제로베이스드 배열형태로 알아서 저장해준다\r\n// 따라서 매개변수를 입력하지 않고도 함수사용이 가능하다!\r\n//  function sum (){\r\n//     return arguments[0] + arguments[1];\r\n// }\r\n\r\n// sum(1 ,10);\r\n\r\n// ------------------------------------------------------------\r\n// const ulEl = document.querySelector('ul');\r\n\r\n// for(let i = 0 ; i < 10 ; i++){\r\n//     const li = document.createElement('li');\r\n//     li.textContent=`List-${i+1}`;\r\n//     if(i % 2){\r\n//         li.addEventListener('click',function(){\r\n//             console.log(li.textContent);\r\n//         })\r\n//     }\r\n//     ulEl.appendChild(li);\r\n// }\r\n\r\n// if(1){\r\n//     console.log('ㅎㅇㅎㅇ');\r\n//     console.log(ulEl);\r\n// }","var OVERLAY_ID = '__parcel__error__overlay__';\r\n\r\nvar OldModule = module.bundle.Module;\r\n\r\nfunction Module(moduleName) {\r\n  OldModule.call(this, moduleName);\r\n  this.hot = {\r\n    data: module.bundle.hotData,\r\n    _acceptCallbacks: [],\r\n    _disposeCallbacks: [],\r\n    accept: function (fn) {\r\n      this._acceptCallbacks.push(fn || function () {});\r\n    },\r\n    dispose: function (fn) {\r\n      this._disposeCallbacks.push(fn);\r\n    }\r\n  };\r\n\r\n  module.bundle.hotData = null;\r\n}\r\n\r\nmodule.bundle.Module = Module;\r\nvar checkedAssets, assetsToAccept;\r\n\r\nvar parent = module.bundle.parent;\r\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\r\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\r\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\r\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\r\n  ws.onmessage = function(event) {\r\n    checkedAssets = {};\r\n    assetsToAccept = [];\r\n\r\n    var data = JSON.parse(event.data);\r\n\r\n    if (data.type === 'update') {\r\n      var handled = false;\r\n      data.assets.forEach(function(asset) {\r\n        if (!asset.isNew) {\r\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\r\n          if (didAccept) {\r\n            handled = true;\r\n          }\r\n        }\r\n      });\r\n\r\n      // Enable HMR for CSS by default.\r\n      handled = handled || data.assets.every(function(asset) {\r\n        return asset.type === 'css' && asset.generated.js;\r\n      });\r\n\r\n      if (handled) {\r\n        console.clear();\r\n\r\n        data.assets.forEach(function (asset) {\r\n          hmrApply(global.parcelRequire, asset);\r\n        });\r\n\r\n        assetsToAccept.forEach(function (v) {\r\n          hmrAcceptRun(v[0], v[1]);\r\n        });\r\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\r\n        location.reload();\r\n      }\r\n    }\r\n\r\n    if (data.type === 'reload') {\r\n      ws.close();\r\n      ws.onclose = function () {\r\n        location.reload();\r\n      }\r\n    }\r\n\r\n    if (data.type === 'error-resolved') {\r\n      console.log('[parcel] ✨ Error resolved');\r\n\r\n      removeErrorOverlay();\r\n    }\r\n\r\n    if (data.type === 'error') {\r\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\r\n\r\n      removeErrorOverlay();\r\n\r\n      var overlay = createErrorOverlay(data);\r\n      document.body.appendChild(overlay);\r\n    }\r\n  };\r\n}\r\n\r\nfunction removeErrorOverlay() {\r\n  var overlay = document.getElementById(OVERLAY_ID);\r\n  if (overlay) {\r\n    overlay.remove();\r\n  }\r\n}\r\n\r\nfunction createErrorOverlay(data) {\r\n  var overlay = document.createElement('div');\r\n  overlay.id = OVERLAY_ID;\r\n\r\n  // html encode message and stack trace\r\n  var message = document.createElement('div');\r\n  var stackTrace = document.createElement('pre');\r\n  message.innerText = data.error.message;\r\n  stackTrace.innerText = data.error.stack;\r\n\r\n  overlay.innerHTML = (\r\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\r\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\r\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\r\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\r\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\r\n    '</div>'\r\n  );\r\n\r\n  return overlay;\r\n\r\n}\r\n\r\nfunction getParents(bundle, id) {\r\n  var modules = bundle.modules;\r\n  if (!modules) {\r\n    return [];\r\n  }\r\n\r\n  var parents = [];\r\n  var k, d, dep;\r\n\r\n  for (k in modules) {\r\n    for (d in modules[k][1]) {\r\n      dep = modules[k][1][d];\r\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\r\n        parents.push(k);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (bundle.parent) {\r\n    parents = parents.concat(getParents(bundle.parent, id));\r\n  }\r\n\r\n  return parents;\r\n}\r\n\r\nfunction hmrApply(bundle, asset) {\r\n  var modules = bundle.modules;\r\n  if (!modules) {\r\n    return;\r\n  }\r\n\r\n  if (modules[asset.id] || !bundle.parent) {\r\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\r\n    asset.isNew = !modules[asset.id];\r\n    modules[asset.id] = [fn, asset.deps];\r\n  } else if (bundle.parent) {\r\n    hmrApply(bundle.parent, asset);\r\n  }\r\n}\r\n\r\nfunction hmrAcceptCheck(bundle, id) {\r\n  var modules = bundle.modules;\r\n  if (!modules) {\r\n    return;\r\n  }\r\n\r\n  if (!modules[id] && bundle.parent) {\r\n    return hmrAcceptCheck(bundle.parent, id);\r\n  }\r\n\r\n  if (checkedAssets[id]) {\r\n    return;\r\n  }\r\n  checkedAssets[id] = true;\r\n\r\n  var cached = bundle.cache[id];\r\n\r\n  assetsToAccept.push([bundle, id]);\r\n\r\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\r\n    return true;\r\n  }\r\n\r\n  return getParents(global.parcelRequire, id).some(function (id) {\r\n    return hmrAcceptCheck(global.parcelRequire, id)\r\n  });\r\n}\r\n\r\nfunction hmrAcceptRun(bundle, id) {\r\n  var cached = bundle.cache[id];\r\n  bundle.hotData = {};\r\n  if (cached) {\r\n    cached.hot.data = bundle.hotData;\r\n  }\r\n\r\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\r\n    cached.hot._disposeCallbacks.forEach(function (cb) {\r\n      cb(bundle.hotData);\r\n    });\r\n  }\r\n\r\n  delete bundle.cache[id];\r\n  bundle(id);\r\n\r\n  cached = bundle.cache[id];\r\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\r\n    cached.hot._acceptCallbacks.forEach(function (cb) {\r\n      cb();\r\n    });\r\n    return true;\r\n  }\r\n}\r\n"]}