{"version":3,"sources":["main.js"],"names":["r","indexOf","console","log","str","length","str1","str2","slice","str3","replace","str4","match","str5","trim"],"mappings":"AAAA;AACA;AACA;AACA,IAAMA,CAAC,GAAG,eAAeC,OAAf,CAAuB,GAAvB,CAAV;AACAC,OAAO,CAACC,GAAR,CAAYH,CAAZ,GAAoB;AAGpB;;AACA,IAAMI,GAAG,GAAG,MAAZ;AACAF,OAAO,CAACC,GAAR,CAAYC,GAAG,CAACC,MAAhB,GAAgC;;AAChCH,OAAO,CAACC,GAAR,CAAY,OAAOE,MAAnB,GAAgC;AAEhC;;AACA,IAAMC,IAAI,GAAG,cAAb;AACAJ,OAAO,CAACC,GAAR,CAAYG,IAAI,CAACL,OAAL,CAAa,QAAb,MAA2B,CAAC,CAAxC,GAAgD;AAGhD;AACA;;AACA,IAAMM,IAAI,GAAG,cAAb;AACAL,OAAO,CAACC,GAAR,CAAYI,IAAI,CAACC,KAAL,CAAW,CAAX,EAAa,CAAb,CAAZ,GAAgC;;AAChCN,OAAO,CAACC,GAAR,CAAYI,IAAI,CAACC,KAAL,CAAW,CAAX,EAAa,EAAb,CAAZ,GAAgC;AAGhC;AACA;;AACA,IAAMC,IAAI,GAAG,cAAb;AACAP,OAAO,CAACC,GAAR,CAAYM,IAAI,CAACC,OAAL,CAAa,OAAb,EAAsB,UAAtB,CAAZ,GAAiD;;AACjDR,OAAO,CAACC,GAAR,CAAYM,IAAI,CAACC,OAAL,CAAa,QAAb,EAAuB,EAAvB,CAAZ,GAAiD;AAGjD;;AACC,IAAMC,IAAI,GAAG,sBAAb;AACAT,OAAO,CAACC,GAAR,CAAYQ,IAAI,CAACC,KAAL,CAAW,SAAX,EAAsB,CAAtB,CAAZ,GAAwC;AAGzC;;AACC,IAAMC,IAAI,GAAG,qBAAb;AACAX,OAAO,CAACC,GAAR,CAAYU,IAAZ,GAAgC;;AAChCX,OAAO,CAACC,GAAR,CAAYU,IAAI,CAACC,IAAL,EAAZ,GAAgC;AAMjC;AACC;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","file":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["//-------------------------------------------------------------------\r\n// indexOf를 사용하면 인수값과 일치하는 인덱스번호를 알수있다 \r\n// 일치하는 값이 없을경우 -1을 반환함!\r\nconst r = 'Hello world!'.indexOf('w')\r\nconsole.log(r);     //6 출력\r\n\r\n\r\n// length를 사용하면 문자열의 글자가 몇개인지 알수있다\r\nconst str = '0123'\r\nconsole.log(str.length);        //4 출력\r\nconsole.log('0123'.length);     //4 출력\r\n\r\n// indexOf 뒤에 (부정비교연산) !== 을 통하여 true||false 값으로 반환 받을 수 있다 \r\nconst str1 = 'Hello world!'\r\nconsole.log(str1.indexOf('world!') !== -1);     //true 출력\r\n\r\n\r\n// slice(추출을 시작할 인덱스 번호, 추출을 끝낼 인덱스 번호-1)를 사용하면\r\n// 문자열의 일부를 추출해서 새로운 문자열을 반환한다\r\nconst str2 = 'Hello world!'\r\nconsole.log(str2.slice(0,3));   //Hel 출력\r\nconsole.log(str2.slice(6,11));  //world 출력\r\n\r\n\r\n// replace('교체당할 문자열', '교체되어서 들어갈 문자열')을 사용하면\r\n// 문자열의 내용을 교체할 수 있다\r\nconst str3 = 'Hello world!'\r\nconsole.log(str3.replace('world', 'Jinwoong'));  //Hello Jinwoong! 출력\r\nconsole.log(str3.replace('world!', ''));         //Hello 출력\r\n\r\n\r\n// 정규표현식..?\r\n const str4 = 'qwaszx3677@naver.com'\r\n console.log(str4.match(/.+(?=@)/)[0]);  //qwaszx3677 출력\r\n\r\n\r\n// trim() 을 사용하면 불필요한 공백을 삭제시켜준다\r\n const str5 = '    Hello world!   '\r\n console.log(str5);              //    Hello world!    출력(공백 포함)\r\n console.log(str5.trim());       //Hello world! 출력(불필요한 공백 사라짐)\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n //상속(확장)\r\n\r\n\r\n//  class Vehicle{\r\n//      constructor(name, wheel){\r\n//         this.name = name\r\n//         this.wheel = wheel\r\n//      }\r\n//  }\r\n// const myVehicle = new Vehicle('운송수단',2)\r\n// console.log(myVehicle)\r\n// console.log(myVehicle.name)\r\n// console.log(myVehicle.wheel)\r\n\r\n// extends가 확장(상속)의 의미를 갖게 만드는 키워드입니다.\r\n// class Bicycle extends Vehicle{\r\n//      constructor(name, wheel){\r\n//          super(name,wheel)\r\n//      }\r\n//  }\r\n//  const mYBicycle = new Bicycle('최진웅자전거',2)\r\n//  console.log(mYBicycle)\r\n\r\n\r\n// Bicycle 클래스의 경우 부모클래스가 가지고있는 로직을 가져와서 그대로 사용한 반면에\r\n// Car 클래스는 부모클래스가 가지고있는 로직에 새로운 로직을 추가해서 사용하고있다\r\n//  class Car extends Vehicle{\r\n//      constructor(name, wheel, license){\r\n//          super(name,wheel)\r\n//          this.license = license\r\n//      }\r\n//  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// ES6 Classes\r\n\r\n\r\n// const jin = {\r\n//     name: 'jinwoong',\r\n//     normal: function () {\r\n//         console.log(this.name)\r\n//     },\r\n//     arrow: () => {\r\n//         console.log(this.name)\r\n//     }\r\n// }\r\n\r\n// jin 객체 안에 normal이라는 이름의 함수를 축약해서 사용할 수 있다.\r\n// 어떤 이름이 나오고 그 뒤에 소괄호 ( ) 바로 그뒤에 중괄호 { }가 나오면 function 키워드를 사용해서 일반함수로\r\n// 만드는 개념과 동일하다!\r\n// const jin = {\r\n//     name: 'jinwoong',\r\n//     normal() {\r\n//         console.log(this.name)\r\n//     },\r\n//     arrow: () => {\r\n//         console.log(this.name)\r\n//     }\r\n// }\r\n\r\n\r\n// User라는 이름의 생성자 함수 정의\r\n// function User(first, last){\r\n//     this.firstName = first\r\n//     this.lastName = last\r\n// }\r\n// 생성자 함수에 getFullName이라는 이름의 프로토타입 함수를 생성\r\n// User.prototype.getFullName = function () {\r\n//     return `${this.firstName} ${this.lastName}`\r\n// }\r\n\r\n// 위의 생성자와 프로토 타입함수를 class로 정의하여 더욱 간결하게 작성해보자\r\n// class User{\r\n//     constructor(first, last){   //constructor또한 하나의 함수라고 생각하면 된다\r\n//         this.firstName = first\r\n//         this.lastName = last\r\n//     }\r\n//     getFullName(){  //프로토타입으로 선언하지않아도 class를 사용하면 함수를 생성할 수 있다!\r\n//         return `${this.firstName} ${this.lastName}`\r\n//     }\r\n// }\r\n\r\n\r\n// new를 사용해서 인스턴스(객체) 생성\r\n// const heropy = new User('Heropy', 'Park')\r\n// const jin = new User('Jinwoong', 'Choi')\r\n// const song = new User('Yousong', 'Kim')\r\n// heropy 부분은 객체 데이터를 출력\r\n// jin, song은 getFullName함수 호출후 결과값 출력\r\n// console.log(heropy)\r\n// console.log(jin.getFullName())\r\n// console.log(song.getFullName())\r\n\r\n\r\n\r\n\r\n\r\n\r\n// -------------------------------------------------------------------\r\n// this\r\n// 일반(normal) 함수는 호출 위치에 따라 this 정의!\r\n// 화살표(arrow) 함수는 자신이 선언된 함수 범위에서 this 정의!\r\n// const t = {\r\n//     name: 'Heropy',\r\n//     a :function(() => {\r\n//         console.log(this.name)\r\n//     });\r\n// }\r\n// heropy.normal()\r\n// heropy.arrow()\r\n\r\n// const amy = {\r\n//     name: 'Amy',\r\n//     normal: heropy.normal,\r\n//     arrow: heropy.arrow\r\n// }\r\n// amy.normal()\r\n// amy.arrow()\r\n\r\n\r\n\r\n\r\n// const timer = {\r\n//     name: 'he',\r\n//     timeout: function() {\r\n//         setTimeout(function(){\r\n//             console.log(this.name)\r\n//         },2000)\r\n//     }\r\n\r\n// }\r\n// timer.timeout()\r\n\r\n// const timer = {\r\n//     name: 'he',\r\n//     timeout: function() {\r\n//         setTimeout(() => {\r\n//             console.log(this.name)\r\n//         },2000)\r\n//     }\r\n// }\r\n// timer.timeout()\r\n// function User(name){\r\n//     this.name = name\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// const hero ={\r\n//     firstName : 'heropy',\r\n//     lastName : 'park',\r\n//     getFullName : function(){\r\n//         return `${this.firstName} ${this.lastName}`\r\n//     }\r\n// }\r\n\r\n\r\n// function User(first, last){\r\n//     this.firstName = first\r\n//     this.lastName = last\r\n// }\r\n// User.prototype.getFullName = function(){\r\n//     return `${this.firstName} ${this.lastName}`\r\n// }\r\n\r\n// const hero = new User('heropy','park')\r\n// const choi = new User('jinwoong','choi')\r\n\r\n// console.log(hero.getFullName())\r\n// console.log(choi)\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 콜백 (Callback)\r\n// 함수의 인수로 사용되는 함수!\r\n// setTimeout(함수, 시간)  ==> setTimeout이라는 함수안에 함수를 인수로 사용되니까 이게 콜백!\r\n \r\n// function timeout(){\r\n//     setTimeout(() =>{\r\n//         console.log('kkiki')\r\n//     }, 4000)\r\n// }\r\n// timeout()\r\n// console.log('Done');\r\n// 이렇게 작성되면~ Done이 먼저 출력된 뒤에 kkiki가 출력된다..ㅜ\r\n// timeout함수가 다 끝난다음에 Done을 출력하기 위해서는 아래와 같이 해야한다(콜백)\r\n// function timeout(kiki){\r\n//     setTimeout(() =>{\r\n//         console.log('kkiki')\r\n//         kiki()\r\n//     }, 4000)\r\n// }\r\n// timeout(() => { \r\n//     console.log('Done');\r\n// })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 타이머 함수\r\n// setTimeout(함수, 시간) : 일정 시간 후 함수 실행\r\n// setInterval(함수, 시간) : 시간 간격마다 함수 실행\r\n// clearTimeout() : 설정된 Timeout 함수를 종료\r\n// clearInterval() : 설정된 Interval 함수를 종료\r\n\r\n// 익명 함수를 만들어서 넣어도 됨~\r\n// setTimeout(function() {\r\n//     console.log('ㅎㅇ');\r\n// }, 3000);\r\n// 위의 코드를 람다를 사용해서 바꿔봄 내용은 동일\r\n// setTimeout(() => {\r\n//     console.log('ㅎㅇ')\r\n// }, 3000);\r\n\r\n// setTimeout을 실행하게되면 특정한 timer값이 반환이 되는데\r\n// 그 값을 timer라는 변수에 한번 받아봄\r\n// const timer = setTimeout(() => {\r\n//     console.log('ㅎㅇ')\r\n// }, 3000);\r\n\r\n// 화면에 Hello world!를 클릭하면 clearTimeout을 사용해서 timer가 종료되도록 만들어봄\r\n// Hello world! 클릭하면 timer가 종료되어서 함수 실행이 안됨! ㅋㅋㅋ\r\n// const h1El = document.querySelector('h1');\r\n// h1El.addEventListener('click', function() {\r\n//     clearTimeout(timer);\r\n// })\r\n\r\n// 위의 코드를 람다로 바꿔봤다\r\n// const h1El = document.querySelector('h1');\r\n// h1El.addEventListener('click', () => {\r\n//     clearTimeout(timer);\r\n// })\r\n\r\n\r\n\r\n// const timer = setInterval(() => {\r\n//     console.log('ㅎㅇ')\r\n// }, 3000);\r\n\r\n\r\n// const h1El = document.querySelector('h1');\r\n// h1El.addEventListener('click', () => {\r\n//     clearInterval(timer);\r\n// })\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 호이스팅\r\n// 함수 선언부가 유효범위 최상단으로 끌어올려지는 현상\r\n\r\n// const a = 7;\r\n\r\n// const double = function () {\r\n//     console.log(a * 4);\r\n// }\r\n\r\n// double()\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 즉시실행함수\r\n// IIFE, Immediately-Invoked Function Expreesion\r\n\r\n// const a = 20;\r\n// function double(){\r\n//     console.log(a * 2);\r\n// }\r\n// double();\r\n//  위와 같은 방법은 함수를 만들자 마자 바로 써야하는데 함수를 만들어 놓고 호출하는 번거로움이 있다\r\n\r\n\r\n// 익명함수를 만들자\r\n// function () {\r\n//     console.log(a * 2);\r\n// }\r\n// 익명함수를 만들었더니 호출을 하지못해서 쓸수가 없다..\r\n\r\n// 위와같은 상황을 해결하기 위해서는 익명 함수를 ( ) 괄호로 묶어주고 그 뒤에 ( ) 괄호를\r\n// 한번더 사용한다!\r\n// (function () {\r\n//     console.log(a * 2);\r\n// })()\r\n\r\n// 위의 코드와 똑같은 내용이다! 다만 위의 경우 익명함수를 만들고 ( )를 사용해서\r\n// 감싸 준 다음 ( )를 한번더 작성했다면 아래의 코드는 익명함수 내부에 ( )를 사용했다!\r\n// (function () {\r\n//     console.log(a * 2);\r\n// }())\r\n\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 화살표 함수\r\n// () => {}       vs     function ()  {}\r\n\r\n\r\n// const double = function (x) {\r\n//     return x*2;\r\n// }\r\n// console.log('double : ', double(7));\r\n\r\n\r\n// const doubleArrow = (x) => {\r\n//     return x*2;\r\n// }\r\n// console.log('doubleArrow : ', doubleArrow(7));\r\n\r\n\r\n// const doubleArrow = (x) => x*2\r\n// console.log('doubleArrow : ', doubleArrow(7));\r\n\r\n// const doubleArrow = (x) => ({\r\n//     name : 'woong'\r\n//  })\r\n//  console.log('doubleArrow : ', doubleArrow(7).name);\r\n\r\n// const sum = function (x, y){\r\n//     return x+y;\r\n// }\r\n// console.log(sum(1 ,10));\r\n\r\n// const sumArrow = (x, y) => {\r\n//     return x+y;\r\n// }\r\n// console.log(sumArrow(1 ,10));\r\n\r\n// const sumArrow = (x, y) => x+y\r\n// console.log(sumArrow(1 ,10));\r\n\r\n\r\n\r\n\r\n//-------------------------------------------------------------------\r\n// 함수 복습\r\n\r\n// \"함수선언방식\"\r\n// function sum(x, y){\r\n//     return x+y;\r\n// }\r\n\r\n// console.log(sum(1,30));\r\n\r\n// 함수의 이름을 작성하지않는 익명 함수를 만들어서 변수에 담에서 사용하는 \"함수표현방식\"\r\n// const sum = function (x, y){\r\n//     return x+y;\r\n// }\r\n\r\n// arguments는 함수를 실행할때 전달받은 인수의 값들을 제로베이스드 배열형태로 알아서 저장해준다\r\n// 따라서 매개변수를 입력하지 않고도 함수사용이 가능하다!\r\n//  function sum (){\r\n//     return arguments[0] + arguments[1];\r\n// }\r\n\r\n// sum(1 ,10);\r\n\r\n// ------------------------------------------------------------\r\n// const ulEl = document.querySelector('ul');\r\n\r\n// for(let i = 0 ; i < 10 ; i++){\r\n//     const li = document.createElement('li');\r\n//     li.textContent=`List-${i+1}`;\r\n//     if(i % 2){\r\n//         li.addEventListener('click',function(){\r\n//             console.log(li.textContent);\r\n//         })\r\n//     }\r\n//     ulEl.appendChild(li);\r\n// }\r\n\r\n// if(1){\r\n//     console.log('ㅎㅇㅎㅇ');\r\n//     console.log(ulEl);\r\n// }"]}